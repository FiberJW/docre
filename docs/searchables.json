[{"href": "./api/Reprocessing_Utils.html#value-intersectRectRect", "title": "intersectRectRect", "contents": " Determines if there is an intersection between two axis-aligned rectangles.\nrect1Pos and rect2Pos refer to the top left of the rectangles.\nrectW and rectH are the width and height of the rectangle.\nReturns true if the two shapes overlap.", "rendered": " Determines if there is an intersection between two axis-aligned rectangles.\nrect1Pos and rect2Pos refer to the top left of the rectangles.\nrectW and rectH are the width and height of the rectangle.\nReturns true if the two shapes overlap.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-intersectRectRect", "title": "intersectRectRect", "contents": "intersectRectRect float float float float float float float float float float float float float float float float bool bool rect1Pos rect1W rect1H rect2Pos rect2W rect2H", "rendered": "<h4 class='item'>let intersectRectRect = (\n    ~rect1Pos: (float, float),\n    ~rect1W: float,\n    ~rect1H: float,\n    ~rect2Pos: (float, float),\n    ~rect2W: float,\n    ~rect2H: float\n) => bool</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-intersectRectCircle", "title": "intersectRectCircle", "contents": " Determines if there is an intersection between a rectangle and a circle.\nrectPos refers to the top left of the rect and circlePos to the center of\nthe circle. rectW and rectH are the width and height of the rectangle and\ncircleRad is the radius of the circle.\nReturns true if the two shapes overlap.", "rendered": " Determines if there is an intersection between a rectangle and a circle.\nrectPos refers to the top left of the rect and circlePos to the center of\nthe circle. rectW and rectH are the width and height of the rectangle and\ncircleRad is the radius of the circle.\nReturns true if the two shapes overlap.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-intersectRectCircle", "title": "intersectRectCircle", "contents": "intersectRectCircle float float float float float float float float float float float float float float bool bool rectPos rectW rectH circlePos circleRad", "rendered": "<h4 class='item'>let intersectRectCircle = (\n    ~rectPos: (float, float),\n    ~rectW: float,\n    ~rectH: float,\n    ~circlePos: (float, float),\n    ~circleRad: float\n) => bool</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-split", "title": "split", "contents": " The split function breaks a string into pieces using a character\nas the delimiter. The sep parameter specifies the character\nthat mark the boundaries between each piece. A list is returned\nthat contains each of the pieces.", "rendered": " The <code>split</code> function breaks a string into pieces using a character\nas the delimiter. The sep parameter specifies the character\nthat mark the boundaries between each piece. A list is returned\nthat contains each of the pieces.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-split", "title": "split", "contents": "split string string char char list list string string  sep", "rendered": "<h4 class='item'>let split = (string, ~sep: char) => list(string)</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noiseSeed", "title": "noiseSeed", "contents": " Sets the seed value for noise.  This will also affect the\nseed value for random and randomf.", "rendered": " Sets the seed value for <code>noise</code>.  This will also affect the\nseed value for <code>random</code> and <code>randomf</code>.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noiseSeed", "title": "noiseSeed", "contents": "noiseSeed int int unit unit ", "rendered": "<h4 class='item'>let noiseSeed = (int) => unit</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noise", "title": "noise", "contents": "Another way to adjust the character of the resulting sequence is the scale of\nthe input coordinates. As the function works within an infinite space, the\nvalue of the coordinates doesn&#39;t matter as such; only the distance between\nsuccessive coordinates is important (such as when using noise() within a loop).\nAs a general rule, the smaller the difference between coordinates, the smoother the resulting noise sequence. Steps of 0.005-0.03 work best for most applications, but this will differ depending on use.", "rendered": "Another way to adjust the character of the resulting sequence is the scale of\nthe input coordinates. As the function works within an infinite space, the\nvalue of the coordinates doesn&#39;t matter as such; only the distance between\nsuccessive coordinates is important (such as when using noise() within a loop).\nAs a general rule, the smaller the difference between coordinates, the smoother the resulting noise sequence. Steps of 0.005-0.03 work best for most applications, but this will differ depending on use.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noise", "title": "noise", "contents": "The actual noise structure is similar to that of an audio signal, in respect\nto the function&#39;s use of frequencies. Similar to the concept of harmonics in\nphysics, Perlin noise is computed over several octaves which are added together\nfor the final result.", "rendered": "The actual noise structure is similar to that of an audio signal, in respect\nto the function&#39;s use of frequencies. Similar to the concept of harmonics in\nphysics, Perlin noise is computed over several octaves which are added together\nfor the final result.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noise", "title": "noise", "contents": "In contrast to the random() function, Perlin noise is defined in an infinite\nn-dimensional space, in which each pair of coordinates corresponds to a\nfixed semi-random value (fixed only for the lifespan of the program). The\nresulting value will always be between 0.0 and 1.0. The noise value can be\nanimated by moving through the noise space.", "rendered": "In contrast to the random() function, Perlin noise is defined in an infinite\nn-dimensional space, in which each pair of coordinates corresponds to a\nfixed semi-random value (fixed only for the lifespan of the program). The\nresulting value will always be between 0.0 and 1.0. The noise value can be\nanimated by moving through the noise space.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noise", "title": "noise", "contents": " Returns the Perlin noise value at specified coordinates. Perlin noise is a\nrandom sequence generator producing a more natural, harmonic succession of\nnumbers than that of the standard random() function. It was developed by Ken\nPerlin in the 1980s and has been used in graphical applications to generate\nprocedural textures, shapes, terrains, and other seemingly organic forms.", "rendered": " Returns the Perlin noise value at specified coordinates. Perlin noise is a\nrandom sequence generator producing a more natural, harmonic succession of\nnumbers than that of the standard random() function. It was developed by Ken\nPerlin in the 1980s and has been used in graphical applications to generate\nprocedural textures, shapes, terrains, and other seemingly organic forms.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noise", "title": "noise", "contents": "noise float float float float float float float float   ", "rendered": "<h4 class='item'>let noise = (float, float, float) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-radians", "title": "radians", "contents": " Converts a degree measurement to its corresponding value in radians.\nRadians and degrees are two ways of measuring the same thing. There are 360\ndegrees in a circle and 2*PI radians in a circle. For example, 90째 = PI/2 =\n1.5707964. All trigonometric functions require their parameters to be\nspecified in radians.", "rendered": " Converts a degree measurement to its corresponding value in radians.\nRadians and degrees are two ways of measuring the same thing. There are 360\ndegrees in a circle and 2*PI radians in a circle. For example, 90째 = PI/2 =\n1.5707964. All trigonometric functions require their parameters to be\nspecified in radians.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-radians", "title": "radians", "contents": "radians float float float float ", "rendered": "<h4 class='item'>let radians = (float) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-degrees", "title": "degrees", "contents": " Converts a radian measurement to its corresponding value in degrees.\nRadians and degrees are two ways of measuring the same thing. There are 360\ndegrees in a circle and 2*PI radians in a circle. For example, 90째 = PI/2 =\n1.5707964. All trigonometric functions require their parameters to be\nspecified in radians.", "rendered": " Converts a radian measurement to its corresponding value in degrees.\nRadians and degrees are two ways of measuring the same thing. There are 360\ndegrees in a circle and 2*PI radians in a circle. For example, 90째 = PI/2 =\n1.5707964. All trigonometric functions require their parameters to be\nspecified in radians.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-degrees", "title": "degrees", "contents": "degrees float float float float ", "rendered": "<h4 class='item'>let degrees = (float) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-mag", "title": "mag", "contents": "This is the same as magf, but converts all its integer arguments to floats\nas a convenience.", "rendered": "This is the same as <code>magf</code>, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-mag", "title": "mag", "contents": " Calculates the magnitude (or length) of a vector. A vector is a direction\nin space commonly used in computer graphics and linear algebra. Because it\nhas no &quot;start&quot; position, the magnitude of a vector can be thought of as the\ndistance from the coordinate 0,0 to its x,y value. Therefore, mag is a\nshortcut for writing dist (0, 0) (x, y).", "rendered": " Calculates the magnitude (or length) of a vector. A vector is a direction\nin space commonly used in computer graphics and linear algebra. Because it\nhas no &quot;start&quot; position, the magnitude of a vector can be thought of as the\ndistance from the coordinate 0,0 to its x,y value. Therefore, <code>mag</code> is a\nshortcut for writing <code>dist (0, 0) (x, y)</code>.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-mag", "title": "mag", "contents": "mag int int int int float float ", "rendered": "<h4 class='item'>let mag = ((int, int)) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-magf", "title": "magf", "contents": " Calculates the magnitude (or length) of a vector. A vector is a direction\nin space commonly used in computer graphics and linear algebra. Because it\nhas no &quot;start&quot; position, the magnitude of a vector can be thought of as the\ndistance from the coordinate 0,0 to its x,y value. Therefore, mag is a\nshortcut for writing dist (0, 0) (x, y).", "rendered": " Calculates the magnitude (or length) of a vector. A vector is a direction\nin space commonly used in computer graphics and linear algebra. Because it\nhas no &quot;start&quot; position, the magnitude of a vector can be thought of as the\ndistance from the coordinate 0,0 to its x,y value. Therefore, <code>mag</code> is a\nshortcut for writing <code>dist (0, 0) (x, y)</code>.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-magf", "title": "magf", "contents": "magf float float float float float float ", "rendered": "<h4 class='item'>let magf = ((float, float)) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-dist", "title": "dist", "contents": "This is the same as distf, but converts all its integer arguments to floats\nas a convenience.", "rendered": "This is the same as <code>distf</code>, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-dist", "title": "dist", "contents": " Calculates the distance between two points.", "rendered": " Calculates the distance between two points.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-dist", "title": "dist", "contents": "dist int int int int int int int int float float p1 p2", "rendered": "<h4 class='item'>let dist = (~p1: (int, int), ~p2: (int, int)) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-distf", "title": "distf", "contents": " Calculates the distance between two points. ", "rendered": " Calculates the distance between two points. ", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-distf", "title": "distf", "contents": "distf float float float float float float float float float float p1 p2", "rendered": "<h4 class='item'>let distf = (\n    ~p1: (float, float),\n    ~p2: (float, float)\n) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-lerpColor", "title": "lerpColor", "contents": "lerpColor Reprocessing_Types Reprocessing_Types Types colorT Reprocessing_Types Reprocessing_Types Types colorT float float Reprocessing_Types Reprocessing_Types Types colorT low high value", "rendered": "<h4 class='item'>let lerpColor = (\n    ~low: Reprocessing_Types.Types.colorT,\n    ~high: Reprocessing_Types.Types.colorT,\n    ~value: float\n) => Reprocessing_Types.Types.colorT</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-lerp", "title": "lerp", "contents": "This is the same as lerpf, but converts all its integer arguments to floats\nas a convenience.", "rendered": "This is the same as <code>lerpf</code>, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-lerp", "title": "lerp", "contents": " Calculates a number between two numbers at a specific increment. The\namt parameter is the amount to interpolate between the two values where 0.0\nequal to the low point, 0.1 is very near the low point, 0.5 is half-way\nin between, etc. The lerp function is convenient for creating motion along a\nstraight path and for drawing dotted lines.", "rendered": " Calculates a number between two numbers at a specific increment. The\namt parameter is the amount to interpolate between the two values where 0.0\nequal to the <code>low</code> point, 0.1 is very near the <code>low</code> point, 0.5 is half-way\nin between, etc. The lerp function is convenient for creating motion along a\nstraight path and for drawing dotted lines.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-lerp", "title": "lerp", "contents": "lerp int int int int float float int int low high value", "rendered": "<h4 class='item'>let lerp = (~low: int, ~high: int, ~value: float) => int</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-lerpf", "title": "lerpf", "contents": " Calculates a number between two numbers at a specific increment. The\namt parameter is the amount to interpolate between the two values where 0.0\nequal to the low point, 0.1 is very near the low point, 0.5 is half-way\nin between, etc. The lerp function is convenient for creating motion along a\nstraight path and for drawing dotted lines.", "rendered": " Calculates a number between two numbers at a specific increment. The\namt parameter is the amount to interpolate between the two values where 0.0\nequal to the <code>low</code> point, 0.1 is very near the <code>low</code> point, 0.5 is half-way\nin between, etc. The lerp function is convenient for creating motion along a\nstraight path and for drawing dotted lines.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-lerpf", "title": "lerpf", "contents": "lerpf float float float float float float float float low high value", "rendered": "<h4 class='item'>let lerpf = (\n    ~low: float,\n    ~high: float,\n    ~value: float\n) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomGaussian", "title": "randomGaussian", "contents": " Returns a float from a random series of numbers having a mean of 0 and\nstandard deviation of 1. Each time the randomGaussian function is called,\nit returns a number fitting a Gaussian, or normal, distribution. There is\ntheoretically no minimum or maximum value that `randomGaussian might\nreturn. Rather, there is just a very low probability that values far from\nthe mean will be returned; and a higher probability that numbers near the\nmean will be returned.", "rendered": " Returns a float from a random series of numbers having a mean of 0 and\nstandard deviation of 1. Each time the <code>randomGaussian</code> function is called,\nit returns a number fitting a Gaussian, or normal, distribution. There is\ntheoretically no minimum or maximum value that `randomGaussian might\nreturn. Rather, there is just a very low probability that values far from\nthe mean will be returned; and a higher probability that numbers near the\nmean will be returned.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomGaussian", "title": "randomGaussian", "contents": "randomGaussian unit unit float float ", "rendered": "<h4 class='item'>let randomGaussian = (unit) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomSeed", "title": "randomSeed", "contents": " Sets the seed value for random and randomf. By default, random\nproduces different results each time the program is run. Set the\nseed parameter to a constant to return the same pseudo-random\nnumbers each time the software is run.\nThis is equivalent to setting Random.init in ocaml/reason.", "rendered": " Sets the seed value for <code>random</code> and <code>randomf</code>. By default, <code>random</code>\nproduces different results each time the program is run. Set the\nseed parameter to a constant to return the same pseudo-random\nnumbers each time the software is run.\nThis is equivalent to setting Random.init in ocaml/reason.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomSeed", "title": "randomSeed", "contents": "randomSeed int int unit unit ", "rendered": "<h4 class='item'>let randomSeed = (int) => unit</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-random", "title": "random", "contents": "This is the same as randomf, but converts all its integer arguments to floats\nas a convenience.", "rendered": "This is the same as <code>randomf</code>, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-random", "title": "random", "contents": " Generates random numbers. Each time the random function is called, it\nreturns an unexpected value within the specified range. The top number is\nnot included.", "rendered": " Generates random numbers. Each time the <code>random</code> function is called, it\nreturns an unexpected value within the specified range. The top number is\nnot included.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-random", "title": "random", "contents": "random int int int int int int min max", "rendered": "<h4 class='item'>let random = (~min: int, ~max: int) => int</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomf", "title": "randomf", "contents": " Generates random numbers. Each time the randomf function is called, it\nreturns an unexpected value within the specified range. The top number is\nnot included.", "rendered": " Generates random numbers. Each time the <code>randomf</code> function is called, it\nreturns an unexpected value within the specified range. The top number is\nnot included.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomf", "title": "randomf", "contents": "randomf float float float float float float min max", "rendered": "<h4 class='item'>let randomf = (~min: float, ~max: float) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-norm", "title": "norm", "contents": " Normalizes a number from another range into a value between 0 and 1.\nIdentical to remap ::value ::low ::high 0. 1.", "rendered": " Normalizes a number from another range into a value between 0 and 1.\nIdentical to <code>remap ::value ::low ::high 0. 1.</code>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-norm", "title": "norm", "contents": "norm float float float float float float float float value low high", "rendered": "<h4 class='item'>let norm = (\n    ~value: float,\n    ~low: float,\n    ~high: float\n) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-remap", "title": "remap", "contents": "This is the same as remapf, but converts all its integer arguments to floats\nas a convenience.", "rendered": "This is the same as <code>remapf</code>, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-remap", "title": "remap", "contents": " Re-maps a number from one range to another.\ni.e. remapf value::5. start1::0. stop1::10. start2::10. stop2::20.\nwould give 15.\nUseful for scaling values.", "rendered": " Re-maps a number from one range to another.\ni.e. <code>remapf value::5. start1::0. stop1::10. start2::10. stop2::20.</code>\nwould give 15.\nUseful for scaling values.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-remap", "title": "remap", "contents": "remap int int int int int int int int int int int int value low1 high1 low2 high2", "rendered": "<h4 class='item'>let remap = (\n    ~value: int,\n    ~low1: int,\n    ~high1: int,\n    ~low2: int,\n    ~high2: int\n) => int</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-remapf", "title": "remapf", "contents": " Re-maps a number from one range to another.\ni.e. remapf value::5. start1::0. stop1::10. start2::10. stop2::20.\nwould give 15.\nUseful for scaling values.", "rendered": " Re-maps a number from one range to another.\ni.e. <code>remapf value::5. start1::0. stop1::10. start2::10. stop2::20.</code>\nwould give 15.\nUseful for scaling values.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-remapf", "title": "remapf", "contents": "remapf float float float float float float float float float float float float value low1 high1 low2 high2", "rendered": "<h4 class='item'>let remapf = (\n    ~value: float,\n    ~low1: float,\n    ~high1: float,\n    ~low2: float,\n    ~high2: float\n) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-constrain", "title": "constrain", "contents": " Constrains a value to not exceed a maximum and minimum value. ", "rendered": " Constrains a value to not exceed a maximum and minimum value. ", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-constrain", "title": "constrain", "contents": "constrain amt low high", "rendered": "<h4 class='item'>let constrain = (~amt: 'a, ~low: 'a, ~high: 'a) => 'a</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-pow", "title": "pow", "contents": " Facilitates exponential expressions. The pow() function is an efficient\nway of multiplying numbers by themselves (or their reciprocals) in large\nquantities.", "rendered": " Facilitates exponential expressions. The pow() function is an efficient\nway of multiplying numbers by themselves (or their reciprocals) in large\nquantities.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-pow", "title": "pow", "contents": "pow int int int int int int base exp", "rendered": "<h4 class='item'>let pow = (~base: int, ~exp: int) => int</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-sq", "title": "sq", "contents": " Squares a number (multiplies a number by itself). The result is always a\npositive number, as multiplying two negative numbers always yields a\npositive result.", "rendered": " Squares a number (multiplies a number by itself). The result is always a\npositive number, as multiplying two negative numbers always yields a\npositive result.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-sq", "title": "sq", "contents": "sq int int int int ", "rendered": "<h4 class='item'>let sq = (int) => int</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-round", "title": "round", "contents": " Calculates the integer closest to the input. For example,\nround 133.8 returns the value 134.", "rendered": " Calculates the integer closest to the input. For example,\n<code>round 133.8</code> returns the value 134.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-round", "title": "round", "contents": "round float float float float ", "rendered": "<h4 class='item'>let round = (float) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-colorf", "title": "colorf", "contents": "Components should be in the range 0.0 to 1.0.", "rendered": "Components should be in the range 0.0 to 1.0.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-colorf", "title": "colorf", "contents": " Creates colors for storing in variables of the color datatype.", "rendered": " Creates colors for storing in variables of the color datatype.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-colorf", "title": "colorf", "contents": "colorf float float float float float float float float Reprocessing_Types Reprocessing_Types Types colorT r g b a", "rendered": "<h4 class='item'>let colorf = (\n    ~r: float,\n    ~g: float,\n    ~b: float,\n    ~a: float\n) => Reprocessing_Types.Types.colorT</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-color", "title": "color", "contents": "Components should be in the range 0 to 255 (or 0x00 to 0xFF).", "rendered": "Components should be in the range 0 to 255 (or 0x00 to 0xFF).", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-color", "title": "color", "contents": " Creates colors for storing in variables of the color datatype.", "rendered": " Creates colors for storing in variables of the color datatype.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-color", "title": "color", "contents": "color int int int int int int int int Reprocessing_Types Reprocessing_Types Types colorT r g b a", "rendered": "<h4 class='item'>let color = (\n    ~r: int,\n    ~g: int,\n    ~b: int,\n    ~a: int\n) => Reprocessing_Types.Types.colorT</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html", "title": "Reprocessing_Utils", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#Reprocessing_Utils", "title": "Reprocessing_Utils", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Types.html#type-Types.soundT", "title": "Types.soundT", "contents": "soundT Reprocessing_Common Reprocessing_Common soundT", "rendered": "<h4 class='item'>type soundT = Reprocessing_Common.soundT</h4>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#type-Types.rectModeT", "title": "Types.rectModeT", "contents": "rectModeT Reprocessing_Common Reprocessing_Common rectModeT", "rendered": "<h4 class='item'>type rectModeT = Reprocessing_Common.rectModeT</h4>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#type-Types.strokeCapT", "title": "Types.strokeCapT", "contents": "strokeCapT Reprocessing_Common Reprocessing_Common strokeCapT", "rendered": "<h4 class='item'>type strokeCapT = Reprocessing_Common.strokeCapT</h4>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#type-Types.fontT", "title": "Types.fontT", "contents": "fontT Reprocessing_Font Reprocessing_Font fontT", "rendered": "<h4 class='item'>type fontT = Reprocessing_Font.fontT</h4>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#type-Types.imageT", "title": "Types.imageT", "contents": "imageT Reprocessing_Common Reprocessing_Common imageT", "rendered": "<h4 class='item'>type imageT = Reprocessing_Common.imageT</h4>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#type-Types.colorT", "title": "Types.colorT", "contents": "colorT Reprocessing_Common Reprocessing_Common colorT", "rendered": "<h4 class='item'>type colorT = Reprocessing_Common.colorT</h4>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#type-Types.glEnvT", "title": "Types.glEnvT", "contents": "glEnvT Reprocessing_Common Reprocessing_Common glEnv", "rendered": "<h4 class='item'>type glEnvT = Reprocessing_Common.glEnv</h4>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#module-Types", "title": "Types", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html", "title": "Reprocessing_Types", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#Reprocessing_Types", "title": "Reprocessing_Types", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Shaders.html#value-fragmentShaderSource", "title": "fragmentShaderSource", "contents": "fragmentShaderSource string string", "rendered": "<h4 class='item'>let fragmentShaderSource = string</h4>", "breadcrumb": "Reprocessing_Shaders"},
{"href": "./api/Reprocessing_Shaders.html#value-vertexShaderSource", "title": "vertexShaderSource", "contents": "vertexShaderSource string string", "rendered": "<h4 class='item'>let vertexShaderSource = string</h4>", "breadcrumb": "Reprocessing_Shaders"},
{"href": "./api/Reprocessing_Shaders.html#value-precisionPrefix", "title": "precisionPrefix", "contents": "precisionPrefix string string", "rendered": "<h4 class='item'>let precisionPrefix = string</h4>", "breadcrumb": "Reprocessing_Shaders"},
{"href": "./api/Reprocessing_Shaders.html", "title": "Reprocessing_Shaders", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Shaders"},
{"href": "./api/Reprocessing_Shaders.html#Reprocessing_Shaders", "title": "Reprocessing_Shaders", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Shaders"},
{"href": "./api/Reprocessing_Matrix.html#value-matinv", "title": "matinv", "contents": " Invert a matrix\n https://www.geometrictools.com/Documentation/LaplaceExpansionTheorem.pdf", "rendered": " Invert a matrix\n https://www.geometrictools.com/Documentation/LaplaceExpansionTheorem.pdf", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matinv", "title": "matinv", "contents": "matinv array array float float array array float float ", "rendered": "<h4 class='item'>let matinv = (array(float)) => array(float)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matptmul", "title": "matptmul", "contents": " x   y = 1    who cares ", "rendered": " [0 1 2]   [x]   [x0 + y1 + 2]\n[y] = [x3 + y4 + 5]\n[1]   [ who cares ]", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matptmul", "title": "matptmul", "contents": "matptmul array array float float float float float float float float float float  ", "rendered": "<h4 class='item'>let matptmul = (array(float), (float, float)) => (\n    float,\n    float\n)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matvecmul", "title": "matvecmul", "contents": " a   b = c   a6 + b7 + c8", "rendered": " [0 1 2]   [a]   [a0 + b1 + c2]\n[b] = [a3 + b4 + c5]\n[c]   [a6 + b7 + c8]", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matvecmul", "title": "matvecmul", "contents": "matvecmul array array float float array array float float unit unit  ", "rendered": "<h4 class='item'>let matvecmul = (array(float), array(float)) => unit</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matmatmul", "title": "matmatmul", "contents": " a b c   d e f = g h i   a6 + d7 + g8, b6 + e7 + h8, c6 + f7 + i8", "rendered": " [0 1 2]   [a b c]   [a0 + d1 + g2, b0 + e1 + h2, c0 + f1 + i2]\n[d e f] = [a3 + d4 + g5, b3 + e4 + h5, c3 + f4 + i5]\n[g h i]   [a6 + d7 + g8, b6 + e7 + h8, c6 + f7 + i8]", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matmatmul", "title": "matmatmul", "contents": "matmatmul array array float float array array float float unit unit  ", "rendered": "<h4 class='item'>let matmatmul = (array(float), array(float)) => unit</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-copyInto", "title": "copyInto", "contents": "copyInto array array array array unit unit src dst", "rendered": "<h4 class='item'>let copyInto = (~src: array('a), ~dst: array('a)) => unit</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-createShearing", "title": "createShearing", "contents": "createShearing float float float float array array float float  ", "rendered": "<h4 class='item'>let createShearing = (float, float) => array(float)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-createScaling", "title": "createScaling", "contents": "createScaling float float float float array array float float  ", "rendered": "<h4 class='item'>let createScaling = (float, float) => array(float)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-createRotation", "title": "createRotation", "contents": "createRotation float float array array float float ", "rendered": "<h4 class='item'>let createRotation = (float) => array(float)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-createTranslation", "title": "createTranslation", "contents": "createTranslation float float float float array array float float  ", "rendered": "<h4 class='item'>let createTranslation = (float, float) => array(float)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-createIdentity", "title": "createIdentity", "contents": "createIdentity unit unit array array float float ", "rendered": "<h4 class='item'>let createIdentity = (unit) => array(float)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-identity", "title": "identity", "contents": "identity array array float float", "rendered": "<h4 class='item'>let identity = array(float)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html", "title": "Reprocessing_Matrix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#Reprocessing_Matrix", "title": "Reprocessing_Matrix", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Internal.html#value-resetSize", "title": "resetSize", "contents": " Recomputes matrices while resetting size of window ", "rendered": " Recomputes matrices while resetting size of window ", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-resetSize", "title": "resetSize", "contents": "resetSize Reprocessing_Common Reprocessing_Common glEnv int int int int unit unit   ", "rendered": "<h4 class='item'>let resetSize = (\n    Reprocessing_Common.glEnv,\n    int,\n    int\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawImageWithMatrixf", "title": "drawImageWithMatrixf", "contents": "drawImageWithMatrixf Reprocessing_Common Reprocessing_Common _imageT float float float float float float float float int int int int int int int int Reprocessing_Common Reprocessing_Common glEnv unit unit  x y width height subx suby subw subh ", "rendered": "<h4 class='item'>let drawImageWithMatrixf = (\n    Reprocessing_Common._imageT,\n    ~x: float,\n    ~y: float,\n    ~width: float,\n    ~height: float,\n    ~subx: int,\n    ~suby: int,\n    ~subw: int,\n    ~subh: int,\n    Reprocessing_Common.glEnv\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawImageWithMatrix", "title": "drawImageWithMatrix", "contents": "drawImageWithMatrix Reprocessing_Common Reprocessing_Common _imageT int int int int int int int int int int int int int int int int Reprocessing_Common Reprocessing_Common glEnv unit unit  x y width height subx suby subw subh ", "rendered": "<h4 class='item'>let drawImageWithMatrix = (\n    Reprocessing_Common._imageT,\n    ~x: int,\n    ~y: int,\n    ~width: int,\n    ~height: int,\n    ~subx: int,\n    ~suby: int,\n    ~subw: int,\n    ~subh: int,\n    Reprocessing_Common.glEnv\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawImage", "title": "drawImage", "contents": "drawImage Reprocessing_Common Reprocessing_Common _imageT float float float float float float float float float float float float float float float float int int int int int int int int Reprocessing_Common Reprocessing_Common glEnv unit unit  p1 p2 p3 p4 subx suby subw subh ", "rendered": "<h4 class='item'>let drawImage = (\n    Reprocessing_Common._imageT,\n    ~p1: (float, float),\n    ~p2: (float, float),\n    ~p3: (float, float),\n    ~p4: (float, float),\n    ~subx: int,\n    ~suby: int,\n    ~subw: int,\n    ~subh: int,\n    Reprocessing_Common.glEnv\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-loadImage", "title": "loadImage", "contents": "loadImage Reprocessing_Common Reprocessing_Common glEnv string string bool bool Reprocessing_Common Reprocessing_Common imageT   ", "rendered": "<h4 class='item'>let loadImage = (\n    Reprocessing_Common.glEnv,\n    string,\n    bool\n) => Reprocessing_Common.imageT</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawArcStroke", "title": "drawArcStroke", "contents": "drawArcStroke Reprocessing_Common Reprocessing_Common glEnv float float float float float float float float float float float float bool bool bool bool array array float float Reprocessing_Common Reprocessing_Common colorT int int unit unit           ", "rendered": "<h4 class='item'>let drawArcStroke = (\n    Reprocessing_Common.glEnv,\n    (float, float),\n    float,\n    float,\n    float,\n    float,\n    bool,\n    bool,\n    array(float),\n    Reprocessing_Common.colorT,\n    int\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawEllipse", "title": "drawEllipse", "contents": "drawEllipse Reprocessing_Common Reprocessing_Common glEnv float float float float float float float float array array float float Reprocessing_Common Reprocessing_Common colorT unit unit      ", "rendered": "<h4 class='item'>let drawEllipse = (\n    Reprocessing_Common.glEnv,\n    (float, float),\n    float,\n    float,\n    array(float),\n    Reprocessing_Common.colorT\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawArc", "title": "drawArc", "contents": "drawArc Reprocessing_Common Reprocessing_Common glEnv float float float float float float float float float float float float bool bool array array float float Reprocessing_Common Reprocessing_Common colorT unit unit         ", "rendered": "<h4 class='item'>let drawArc = (\n    Reprocessing_Common.glEnv,\n    (float, float),\n    float,\n    float,\n    float,\n    float,\n    bool,\n    array(float),\n    Reprocessing_Common.colorT\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawLineWithMatrix", "title": "drawLineWithMatrix", "contents": "drawLineWithMatrix float float float float float float float float array array float float Reprocessing_Common Reprocessing_Common colorT float float bool bool Reprocessing_Common Reprocessing_Common glEnv unit unit p1 p2 matrix color width project ", "rendered": "<h4 class='item'>let drawLineWithMatrix = (\n    ~p1: (float, float),\n    ~p2: (float, float),\n    ~matrix: array(float),\n    ~color: Reprocessing_Common.colorT,\n    ~width: float,\n    ~project: bool,\n    Reprocessing_Common.glEnv\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawTriangle", "title": "drawTriangle", "contents": "drawTriangle Reprocessing_Common Reprocessing_Common glEnv float float float float float float float float float float float float Reprocessing_Common Reprocessing_Common colorT unit unit     color", "rendered": "<h4 class='item'>let drawTriangle = (\n    Reprocessing_Common.glEnv,\n    (float, float),\n    (float, float),\n    (float, float),\n    ~color: Reprocessing_Common.colorT\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-addRectToGlobalBatch", "title": "addRectToGlobalBatch", "contents": "addRectToGlobalBatch Reprocessing_Common Reprocessing_Common glEnv float float float float float float float float float float float float float float float float Reprocessing_Common Reprocessing_Common colorT unit unit  bottomRight bottomLeft topRight topLeft color", "rendered": "<h4 class='item'>let addRectToGlobalBatch = (\n    Reprocessing_Common.glEnv,\n    ~bottomRight: (float, float),\n    ~bottomLeft: (float, float),\n    ~topRight: (float, float),\n    ~topLeft: (float, float),\n    ~color: Reprocessing_Common.colorT\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-maybeFlushBatch", "title": "maybeFlushBatch", "contents": "maybeFlushBatch option option Reasongl Reasongl Gl textureT int int int int Reprocessing_Common Reprocessing_Common glEnv unit unit texture el vert ", "rendered": "<h4 class='item'>let maybeFlushBatch = (\n    ~texture: option(Reasongl.Gl.textureT),\n    ~el: int,\n    ~vert: int,\n    Reprocessing_Common.glEnv\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-flushGlobalBatch", "title": "flushGlobalBatch", "contents": "flushGlobalBatch Reprocessing_Common Reprocessing_Common glEnv unit unit ", "rendered": "<h4 class='item'>let flushGlobalBatch = (Reprocessing_Common.glEnv) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawGeometry", "title": "drawGeometry", "contents": "drawGeometry Reasongl Reasongl Gl Bigarray t float float Reasongl Reasongl Gl Bigarray float32_elt Reasongl Reasongl Gl Bigarray t int int Reasongl Reasongl Gl Bigarray int16_unsigned_elt int int int int Reasongl Reasongl Gl textureT Reprocessing_Common Reprocessing_Common glEnv unit unit vertexArray elementArray mode count textureBuffer ", "rendered": "<h4 class='item'>let drawGeometry = (\n    ~vertexArray: Reasongl.Gl.Bigarray.t(\n        float,\n        Reasongl.Gl.Bigarray.float32_elt\n    ),\n    ~elementArray: Reasongl.Gl.Bigarray.t(\n        int,\n        Reasongl.Gl.Bigarray.int16_unsigned_elt\n    ),\n    ~mode: int,\n    ~count: int,\n    ~textureBuffer: Reasongl.Gl.textureT,\n    Reprocessing_Common.glEnv\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-createCanvas", "title": "createCanvas", "contents": "createCanvas Reasongl Reasongl Gl Window t Reprocessing_Common Reprocessing_Common glEnv ", "rendered": "<h4 class='item'>let createCanvas = (\n    Reasongl.Gl.Window.t\n) => Reprocessing_Common.glEnv</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-getProgram", "title": "getProgram", "contents": "getProgram Reasongl Reasongl Gl contextT string string string string option option Reasongl Reasongl Gl programT context vertexShader fragmentShader", "rendered": "<h4 class='item'>let getProgram = (\n    ~context: Reasongl.Gl.contextT,\n    ~vertexShader: string,\n    ~fragmentShader: string\n) => option(Reasongl.Gl.programT)</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html", "title": "Reprocessing_Internal", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#Reprocessing_Internal", "title": "Reprocessing_Internal", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Hotreload.html#value-checkRebuild", "title": "checkRebuild", "contents": "checkRebuild string string bool bool ", "rendered": "<h4 class='item'>let checkRebuild = (string) => bool</h4>", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Hotreload.html#value-first", "title": "first", "contents": "first Pervasives Pervasives ref bool bool", "rendered": "<h4 class='item'>let first = Pervasives.ref(bool)</h4>", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Hotreload.html#value-NoHotreloading.checkRebuild", "title": "NoHotreloading.checkRebuild", "contents": "checkRebuild ", "rendered": "<h4 class='item'>let checkRebuild = ('a) => 'a</h4>", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Hotreload.html#module-NoHotreloading", "title": "NoHotreloading", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Hotreload.html", "title": "Reprocessing_Hotreload", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Hotreload.html#Reprocessing_Hotreload", "title": "Reprocessing_Hotreload", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Font.html#type-fontT", "title": "fontT", "contents": "fontT Pervasives Pervasives ref option option Font Font internalType", "rendered": "<h4 class='item'>type fontT = Pervasives.ref(option(Font.internalType))</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.calcStringWidth", "title": "Font.calcStringWidth", "contents": "calcStringWidth Reprocessing_Common Reprocessing_Common glEnv internalType internalType string string int int   ", "rendered": "<h4 class='item'>let calcStringWidth = (\n    Reprocessing_Common.glEnv,\n    internalType,\n    string\n) => int</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.drawString", "title": "Font.drawString", "contents": "drawString Reprocessing_Common Reprocessing_Common glEnv Pervasives Pervasives ref option option internalType internalType string string int int int int unit unit     ", "rendered": "<h4 class='item'>let drawString = (\n    Reprocessing_Common.glEnv,\n    Pervasives.ref(option(internalType)),\n    string,\n    int,\n    int\n) => unit</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.drawChar", "title": "Font.drawChar", "contents": "drawChar Reprocessing_Common Reprocessing_Common glEnv internalType internalType option option Reprocessing_Common Reprocessing_Common _imageT char char option option char char int int int int int int       ", "rendered": "<h4 class='item'>let drawChar = (\n    Reprocessing_Common.glEnv,\n    internalType,\n    option(Reprocessing_Common._imageT),\n    char,\n    option(char),\n    int,\n    int\n) => int</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.getChar", "title": "Font.getChar", "contents": "getChar internalType internalType char char charT charT  ", "rendered": "<h4 class='item'>let getChar = (internalType, char) => charT</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.parseFontFormat", "title": "Font.parseFontFormat", "contents": "parseFontFormat Reprocessing_Common Reprocessing_Common glEnv string string bool bool Pervasives Pervasives ref option option internalType internalType   ", "rendered": "<h4 class='item'>let parseFontFormat = (\n    Reprocessing_Common.glEnv,\n    string,\n    bool\n) => Pervasives.ref(option(internalType))</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.replaceFilename", "title": "Font.replaceFilename", "contents": "replaceFilename string string string string string string  ", "rendered": "<h4 class='item'>let replaceFilename = (string, string) => string</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.parse_kern_fmt", "title": "Font.parse_kern_fmt", "contents": "parse_kern_fmt Reprocessing_Common Reprocessing_Common Stream t int int IntPairMap IntPairMap t int int Reprocessing_Common Reprocessing_Common Stream t IntPairMap IntPairMap t int int   ", "rendered": "<h4 class='item'>let parse_kern_fmt = (\n    Reprocessing_Common.Stream.t,\n    int,\n    IntPairMap.t(int)\n) => (Reprocessing_Common.Stream.t, IntPairMap.t(int))</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.parse_char_fmt", "title": "Font.parse_char_fmt", "contents": "parse_char_fmt Reprocessing_Common Reprocessing_Common Stream t int int IntMap IntMap t charT charT Reprocessing_Common Reprocessing_Common Stream t IntMap IntMap t charT charT   ", "rendered": "<h4 class='item'>let parse_char_fmt = (\n    Reprocessing_Common.Stream.t,\n    int,\n    IntMap.t(charT)\n) => (Reprocessing_Common.Stream.t, IntMap.t(charT))</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.pop_line", "title": "Font.pop_line", "contents": "pop_line Reprocessing_Common Reprocessing_Common Stream t Reprocessing_Common Reprocessing_Common Stream t ", "rendered": "<h4 class='item'>let pop_line = (\n    Reprocessing_Common.Stream.t\n) => Reprocessing_Common.Stream.t</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.parse_string", "title": "Font.parse_string", "contents": "parse_string Reprocessing_Common Reprocessing_Common Stream t Reprocessing_Common Reprocessing_Common Stream t string string ", "rendered": "<h4 class='item'>let parse_string = (Reprocessing_Common.Stream.t) => (\n    Reprocessing_Common.Stream.t,\n    string\n)</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.parse_num", "title": "Font.parse_num", "contents": "parse_num Reprocessing_Common Reprocessing_Common Stream t Reprocessing_Common Reprocessing_Common Stream t int int ", "rendered": "<h4 class='item'>let parse_num = (Reprocessing_Common.Stream.t) => (\n    Reprocessing_Common.Stream.t,\n    int\n)</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#type-Font.t", "title": "Font.t", "contents": "t Pervasives Pervasives ref option option internalType internalType", "rendered": "<h4 class='item'>type t = Pervasives.ref(option(internalType))</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#type-Font.internalType", "title": "Font.internalType", "contents": "internalType chars IntMap IntMap t charT charT kerning IntPairMap IntPairMap t int int image Reprocessing_Common Reprocessing_Common imageT", "rendered": "<h4 class='item'>type internalType = {\n    chars: IntMap.t(charT),\n    kerning: IntPairMap.t(int),\n    image: Reprocessing_Common.imageT\n}</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#type-Font.charT", "title": "Font.charT", "contents": "charT x int int y int int width int int height int int xoffset int int yoffset int int xadvance int int", "rendered": "<h4 class='item'>type charT = {\n    x: int,\n    y: int,\n    width: int,\n    height: int,\n    xoffset: int,\n    yoffset: int,\n    xadvance: int\n}</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#module-Font", "title": "Font", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html", "title": "Reprocessing_Font", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#Reprocessing_Font", "title": "Reprocessing_Font", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Events.html#value-keycodeMap", "title": "keycodeMap", "contents": "keycodeMap int int keycodeT keycodeT ", "rendered": "<h4 class='item'>let keycodeMap = (int) => keycodeT</h4>", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Events.html#type-keycodeT", "title": "keycodeT", "contents": "keycodeT Reasongl Reasongl Gl Events keycodeT", "rendered": "<h4 class='item'>type keycodeT = \n    | Backspace\n    | Tab\n    | Enter\n    | Escape\n    | Space\n    | Quote\n    | Comma\n    | Minus\n    | Period\n    | Slash\n    | Num_0\n    | Num_1\n    | Num_2\n    | Num_3\n    | Num_4\n    | Num_5\n    | Num_6\n    | Num_7\n    | Num_8\n    | Num_9\n    | Semicolon\n    | Equals\n    | OpenBracket\n    | Backslash\n    | CloseBracket\n    | A\n    | B\n    | C\n    | D\n    | E\n    | F\n    | G\n    | H\n    | I\n    | J\n    | K\n    | L\n    | M\n    | N\n    | O\n    | P\n    | Q\n    | R\n    | S\n    | T\n    | U\n    | V\n    | W\n    | X\n    | Y\n    | Z\n    | Right\n    | Left\n    | Down\n    | Up\n    | LeftCtrl\n    | LeftShift\n    | LeftAlt\n    | LeftOsKey\n    | RightCtrl\n    | RightShift\n    | RightAlt\n    | RightOsKey\n    | CapsLock\n    | Backtick\n    | Nothing\n = Reasongl.Gl.Events.keycodeT</h4>", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Events.html#type-stateT", "title": "stateT", "contents": "stateT Reasongl Reasongl Gl Events stateT", "rendered": "<h4 class='item'>type stateT = | MouseDown | MouseUp\n = Reasongl.Gl.Events.stateT</h4>", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Events.html#type-buttonStateT", "title": "buttonStateT", "contents": "buttonStateT Reasongl Reasongl Gl Events buttonStateT", "rendered": "<h4 class='item'>type buttonStateT = \n    | LeftButton\n    | MiddleButton\n    | RightButton\n = Reasongl.Gl.Events.buttonStateT</h4>", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Events.html", "title": "Reprocessing_Events", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Events.html#Reprocessing_Events", "title": "Reprocessing_Events", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Env.html#value-saveUserData", "title": "saveUserData", "contents": "saveUserData string string Reprocessing_Types Reprocessing_Types Types glEnvT bool bool key value ", "rendered": "<h4 class='item'>let saveUserData = (\n    ~key: string,\n    ~value: 'a,\n    Reprocessing_Types.Types.glEnvT\n) => bool</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-loadUserData", "title": "loadUserData", "contents": "loadUserData string string Reprocessing_Types Reprocessing_Types Types glEnvT option option key ", "rendered": "<h4 class='item'>let loadUserData = (\n    ~key: string,\n    Reprocessing_Types.Types.glEnvT\n) => option('a)</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-localizePointf", "title": "localizePointf", "contents": "localizePointf float float float float Reprocessing_Types Reprocessing_Types Types glEnvT float float float float  ", "rendered": "<h4 class='item'>let localizePointf = (\n    (float, float),\n    Reprocessing_Types.Types.glEnvT\n) => (float, float)</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-localizePoint", "title": "localizePoint", "contents": " Localize a point in canvas coordinates to the current env&#39;s\n transformed coordinates", "rendered": " Localize a point in canvas coordinates to the current env&#39;s\n transformed coordinates", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-localizePoint", "title": "localizePoint", "contents": "localizePoint int int int int Reprocessing_Types Reprocessing_Types Types glEnvT int int int int  ", "rendered": "<h4 class='item'>let localizePoint = (\n    (int, int),\n    Reprocessing_Types.Types.glEnvT\n) => (int, int)</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-deltaTime", "title": "deltaTime", "contents": " Time in seconds since the last frame ", "rendered": " Time in seconds since the last frame ", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-deltaTime", "title": "deltaTime", "contents": "deltaTime Reprocessing_Types Reprocessing_Types Types glEnvT float float ", "rendered": "<h4 class='item'>let deltaTime = (Reprocessing_Types.Types.glEnvT) => float</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-getTimeMs", "title": "getTimeMs", "contents": "getTimeMs Reprocessing_Types Reprocessing_Types Types glEnvT float float ", "rendered": "<h4 class='item'>let getTimeMs = (Reprocessing_Types.Types.glEnvT) => float</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-playSound", "title": "playSound", "contents": "playSound Reprocessing_Types Reprocessing_Types Types soundT option option float float option option bool bool Reprocessing_Types Reprocessing_Types Types glEnvT unit unit  volume loop ", "rendered": "<h4 class='item'>let playSound = (\n    Reprocessing_Types.Types.soundT,\n    ~?volume: option(float),\n    ~?loop: option(bool),\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-loadSound", "title": "loadSound", "contents": "loadSound string string Reprocessing_Types Reprocessing_Types Types glEnvT Reprocessing_Types Reprocessing_Types Types soundT  ", "rendered": "<h4 class='item'>let loadSound = (\n    string,\n    Reprocessing_Types.Types.glEnvT\n) => Reprocessing_Types.Types.soundT</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-frameCount", "title": "frameCount", "contents": "frameCount Reprocessing_Types Reprocessing_Types Types glEnvT int int ", "rendered": "<h4 class='item'>let frameCount = (Reprocessing_Types.Types.glEnvT) => int</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-frameRate", "title": "frameRate", "contents": "frameRate Reprocessing_Types Reprocessing_Types Types glEnvT int int ", "rendered": "<h4 class='item'>let frameRate = (Reprocessing_Types.Types.glEnvT) => int</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-resizeable", "title": "resizeable", "contents": "resizeable bool bool Reprocessing_Types Reprocessing_Types Types glEnvT unit unit  ", "rendered": "<h4 class='item'>let resizeable = (\n    bool,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-size", "title": "size", "contents": "size int int int int Reprocessing_Types Reprocessing_Types Types glEnvT unit unit width height ", "rendered": "<h4 class='item'>let size = (\n    ~width: int,\n    ~height: int,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-keyReleased", "title": "keyReleased", "contents": "keyReleased Reprocessing_Common Reprocessing_Common KeySet elt Reprocessing_Common Reprocessing_Common glEnv bool bool  ", "rendered": "<h4 class='item'>let keyReleased = (\n    Reprocessing_Common.KeySet.elt,\n    Reprocessing_Common.glEnv\n) => bool</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-keyPressed", "title": "keyPressed", "contents": "keyPressed Reprocessing_Common Reprocessing_Common KeySet elt Reprocessing_Common Reprocessing_Common glEnv bool bool  ", "rendered": "<h4 class='item'>let keyPressed = (\n    Reprocessing_Common.KeySet.elt,\n    Reprocessing_Common.glEnv\n) => bool</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-key", "title": "key", "contents": "key Reprocessing_Common Reprocessing_Common KeySet elt Reprocessing_Common Reprocessing_Common glEnv bool bool  ", "rendered": "<h4 class='item'>let key = (\n    Reprocessing_Common.KeySet.elt,\n    Reprocessing_Common.glEnv\n) => bool</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-keyCode", "title": "keyCode", "contents": "keyCode Reprocessing_Types Reprocessing_Types Types glEnvT Reprocessing_Events Reprocessing_Events keycodeT ", "rendered": "<h4 class='item'>let keyCode = (\n    Reprocessing_Types.Types.glEnvT\n) => Reprocessing_Events.keycodeT</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-mousePressed", "title": "mousePressed", "contents": "mousePressed Reprocessing_Types Reprocessing_Types Types glEnvT bool bool ", "rendered": "<h4 class='item'>let mousePressed = (Reprocessing_Types.Types.glEnvT) => bool</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-pmouse", "title": "pmouse", "contents": "pmouse Reprocessing_Types Reprocessing_Types Types glEnvT int int int int ", "rendered": "<h4 class='item'>let pmouse = (Reprocessing_Types.Types.glEnvT) => (int, int)</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-mouse", "title": "mouse", "contents": "mouse Reprocessing_Types Reprocessing_Types Types glEnvT int int int int ", "rendered": "<h4 class='item'>let mouse = (Reprocessing_Types.Types.glEnvT) => (int, int)</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-changedTouches", "title": "changedTouches", "contents": "changedTouches Reprocessing_Types Reprocessing_Types Types glEnvT list list float float float float float float ", "rendered": "<h4 class='item'>let changedTouches = (\n    Reprocessing_Types.Types.glEnvT\n) => list((float, float, float))</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-touches", "title": "touches", "contents": "touches Reprocessing_Types Reprocessing_Types Types glEnvT Hashtbl Hashtbl t float float float float float float ", "rendered": "<h4 class='item'>let touches = (\n    Reprocessing_Types.Types.glEnvT\n) => Hashtbl.t(float, (float, float))</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-maxHeight", "title": "maxHeight", "contents": "maxHeight Reprocessing_Types Reprocessing_Types Types glEnvT int int ", "rendered": "<h4 class='item'>let maxHeight = (Reprocessing_Types.Types.glEnvT) => int</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-maxWidth", "title": "maxWidth", "contents": "maxWidth Reprocessing_Types Reprocessing_Types Types glEnvT int int ", "rendered": "<h4 class='item'>let maxWidth = (Reprocessing_Types.Types.glEnvT) => int</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-height", "title": "height", "contents": "height Reprocessing_Types Reprocessing_Types Types glEnvT int int ", "rendered": "<h4 class='item'>let height = (Reprocessing_Types.Types.glEnvT) => int</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-width", "title": "width", "contents": "width Reprocessing_Types Reprocessing_Types Types glEnvT int int ", "rendered": "<h4 class='item'>let width = (Reprocessing_Types.Types.glEnvT) => int</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-isTouchScreen", "title": "isTouchScreen", "contents": "isTouchScreen Reprocessing_Types Reprocessing_Types Types glEnvT bool bool ", "rendered": "<h4 class='item'>let isTouchScreen = (\n    Reprocessing_Types.Types.glEnvT\n) => bool</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html", "title": "Reprocessing_Env", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#Reprocessing_Env", "title": "Reprocessing_Env", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Draw.html#value-background", "title": "background", "contents": " The background function sets the color used for the background of the\nProcessing window. The default background is black. This function is\ntypically used within draw to clear the display window at the beginning of\neach frame, but it can be used inside setup to set the background on the\nfirst frame of animation or if the backgound need only be set once.", "rendered": " The <code>background</code> function sets the color used for the background of the\nProcessing window. The default background is black. This function is\ntypically used within <code>draw</code> to clear the display window at the beginning of\neach frame, but it can be used inside <code>setup</code> to set the background on the\nfirst frame of animation or if the backgound need only be set once.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-background", "title": "background", "contents": "background Reprocessing_Types Reprocessing_Types Types colorT Reprocessing_Types Reprocessing_Types Types glEnvT unit unit  ", "rendered": "<h4 class='item'>let background = (\n    Reprocessing_Types.Types.colorT,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-clear", "title": "clear", "contents": " Clears the entire screen. Normally, background is used for this purpose,\nclear will have different results in web and native. ", "rendered": " Clears the entire screen. Normally, background is used for this purpose,\nclear will have different results in web and native. ", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-clear", "title": "clear", "contents": "clear Reprocessing_Types Reprocessing_Types Types glEnvT unit unit ", "rendered": "<h4 class='item'>let clear = (Reprocessing_Types.Types.glEnvT) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-text", "title": "text", "contents": " Draws text to the screen.\nThe font should be loaded using the loadFont function.", "rendered": " Draws text to the screen.\nThe font should be loaded using the <code>loadFont</code> function.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-text", "title": "text", "contents": "text Reprocessing_Font Reprocessing_Font fontT string string int int int int Reprocessing_Types Reprocessing_Types Types glEnvT unit unit font body pos ", "rendered": "<h4 class='item'>let text = (\n    ~font: Reprocessing_Font.fontT,\n    ~body: string,\n    ~pos: (int, int),\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-loadFont", "title": "loadFont", "contents": " Loads a font and returns a handle to it. This will lazily load and\nattempting to draw an font that has not finished loading will result\nin nothing being drawn.\nIn general, all fonts should be loaded in setup to preload them at\nthe start of the program.\nIf isPixel is set to true, then when scaling the font, it will use\nGL_NEAREST (you want this setting if your font is meant to look\npixelated)", "rendered": " Loads a font and returns a handle to it. This will lazily load and\nattempting to draw an font that has not finished loading will result\nin nothing being drawn.\nIn general, all fonts should be loaded in <code>setup</code> to preload them at\nthe start of the program.\nIf isPixel is set to true, then when scaling the font, it will use\nGL_NEAREST (you want this setting if your font is meant to look\npixelated)", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-loadFont", "title": "loadFont", "contents": "loadFont string string option option bool bool Reprocessing_Types Reprocessing_Types Types glEnvT Reprocessing_Font Reprocessing_Font fontT filename isPixel ", "rendered": "<h4 class='item'>let loadFont = (\n    ~filename: string,\n    ~?isPixel: option(bool),\n    Reprocessing_Types.Types.glEnvT\n) => Reprocessing_Font.fontT</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arc", "title": "arc", "contents": "This is the same as arcf, but converts all its integer arguments to\nfloats as a convenience.", "rendered": "This is the same as <code>arcf</code>, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arc", "title": "arc", "contents": " Draws an arc to the screen. Arcs are drawn along the outer edge of an\nellipse defined by the center, radx, and rady parameters. Use the\nstart and stop parameters to specify the angles (in radians) at which\nto draw the arc. isPie defines whether or not lines should be drawn to\nthe center at the start and stop points of the arc rather than simply\nconnecting the points.  If isOpen is true, no line will be drawn other\nthan the arc between start and stop.", "rendered": " Draws an arc to the screen. Arcs are drawn along the outer edge of an\nellipse defined by the center, radx, and rady parameters. Use the\nstart and stop parameters to specify the angles (in radians) at which\nto draw the arc. isPie defines whether or not lines should be drawn to\nthe center at the start and stop points of the arc rather than simply\nconnecting the points.  If isOpen is true, no line will be drawn other\nthan the arc between start and stop.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arc", "title": "arc", "contents": "arc int int int int int int int int float float float float bool bool bool bool Reprocessing_Types Reprocessing_Types Types glEnvT unit unit center radx rady start stop isOpen isPie ", "rendered": "<h4 class='item'>let arc = (\n    ~center: (int, int),\n    ~radx: int,\n    ~rady: int,\n    ~start: float,\n    ~stop: float,\n    ~isOpen: bool,\n    ~isPie: bool,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arcf", "title": "arcf", "contents": " Draws an arc to the screen. Arcs are drawn along the outer edge of an\nellipse defined by the center, radx, and rady parameters. Use the\nstart and stop parameters to specify the angles (in radians) at which\nto draw the arc. isPie defines whether or not lines should be drawn to\nthe center at the start and stop points of the arc rather than simply\nconnecting the points.  If isOpen is true, no line will be drawn other\nthan the arc between start and stop.", "rendered": " Draws an arc to the screen. Arcs are drawn along the outer edge of an\nellipse defined by the center, radx, and rady parameters. Use the\nstart and stop parameters to specify the angles (in radians) at which\nto draw the arc. isPie defines whether or not lines should be drawn to\nthe center at the start and stop points of the arc rather than simply\nconnecting the points.  If isOpen is true, no line will be drawn other\nthan the arc between start and stop.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arcf", "title": "arcf", "contents": "arcf float float float float float float float float float float float float bool bool bool bool Reprocessing_Types Reprocessing_Types Types glEnvT unit unit center radx rady start stop isOpen isPie ", "rendered": "<h4 class='item'>let arcf = (\n    ~center: (float, float),\n    ~radx: float,\n    ~rady: float,\n    ~start: float,\n    ~stop: float,\n    ~isOpen: bool,\n    ~isPie: bool,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-bezier", "title": "bezier", "contents": " Draws a Bezier curve on the screen. These curves are defined by a\nseries of anchor and control points. The parameter p1 specifies the\nfirst anchor point and the last parameter specifies the other anchor\npoint. The middle parameters p2 and p3 specify the control points\nwhich define the shape of the curve. Bezier curves were developed\nby French engineer Pierre Bezier.", "rendered": " Draws a Bezier curve on the screen. These curves are defined by a\nseries of anchor and control points. The parameter p1 specifies the\nfirst anchor point and the last parameter specifies the other anchor\npoint. The middle parameters p2 and p3 specify the control points\nwhich define the shape of the curve. Bezier curves were developed\nby French engineer Pierre Bezier.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-bezier", "title": "bezier", "contents": "bezier float float float float float float float float float float float float float float float float Reprocessing_Types Reprocessing_Types Types glEnvT unit unit p1 p2 p3 p4 ", "rendered": "<h4 class='item'>let bezier = (\n    ~p1: (float, float),\n    ~p2: (float, float),\n    ~p3: (float, float),\n    ~p4: (float, float),\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-triangle", "title": "triangle", "contents": "This is the same as trianglef, but converts all its integer arguments to\nfloats as a convenience.", "rendered": "This is the same as <code>trianglef</code>, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-triangle", "title": "triangle", "contents": " A triangle is a plane created by connecting three points.", "rendered": " A triangle is a plane created by connecting three points.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-triangle", "title": "triangle", "contents": "triangle int int int int int int int int int int int int Reprocessing_Types Reprocessing_Types Types glEnvT unit unit p1 p2 p3 ", "rendered": "<h4 class='item'>let triangle = (\n    ~p1: (int, int),\n    ~p2: (int, int),\n    ~p3: (int, int),\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-trianglef", "title": "trianglef", "contents": " A triangle is a plane created by connecting three points. ", "rendered": " A triangle is a plane created by connecting three points. ", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-trianglef", "title": "trianglef", "contents": "trianglef float float float float float float float float float float float float Reprocessing_Types Reprocessing_Types Types glEnvT unit unit p1 p2 p3 ", "rendered": "<h4 class='item'>let trianglef = (\n    ~p1: (float, float),\n    ~p2: (float, float),\n    ~p3: (float, float),\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixel", "title": "pixel", "contents": "This is the same as pixelf, but converts all its integer arguments to\nfloats as a convenience.", "rendered": "This is the same as <code>pixelf</code>, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixel", "title": "pixel", "contents": " Adds a single point with a radius defined by strokeWeight", "rendered": " Adds a single point with a radius defined by strokeWeight", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixel", "title": "pixel", "contents": "pixel int int int int Reprocessing_Types Reprocessing_Types Types colorT Reprocessing_Types Reprocessing_Types Types glEnvT unit unit pos color ", "rendered": "<h4 class='item'>let pixel = (\n    ~pos: (int, int),\n    ~color: Reprocessing_Types.Types.colorT,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixelf", "title": "pixelf", "contents": " Adds a single point with a radius defined by strokeWeight ", "rendered": " Adds a single point with a radius defined by strokeWeight ", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixelf", "title": "pixelf", "contents": "pixelf float float float float Reprocessing_Types Reprocessing_Types Types colorT Reprocessing_Types Reprocessing_Types Types glEnvT unit unit pos color ", "rendered": "<h4 class='item'>let pixelf = (\n    ~pos: (float, float),\n    ~color: Reprocessing_Types.Types.colorT,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quad", "title": "quad", "contents": "This is the same as quadf, but converts all its integer arguments to\nfloats as a convenience.", "rendered": "This is the same as <code>quadf</code>, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quad", "title": "quad", "contents": " A quad is a quadrilateral, a four sided polygon. It is similar to a\nrectangle, but the angles between its edges are not constrained to ninety\ndegrees. The parameter p1 sets the first vertex and the subsequest points\nshould proceed clockwise or counter-clockwise around the defined shape.", "rendered": " A quad is a quadrilateral, a four sided polygon. It is similar to a\nrectangle, but the angles between its edges are not constrained to ninety\ndegrees. The parameter p1 sets the first vertex and the subsequest points\nshould proceed clockwise or counter-clockwise around the defined shape.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quad", "title": "quad", "contents": "quad int int int int int int int int int int int int int int int int Reprocessing_Types Reprocessing_Types Types glEnvT unit unit p1 p2 p3 p4 ", "rendered": "<h4 class='item'>let quad = (\n    ~p1: (int, int),\n    ~p2: (int, int),\n    ~p3: (int, int),\n    ~p4: (int, int),\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quadf", "title": "quadf", "contents": " A quad is a quadrilateral, a four sided polygon. It is similar to a\nrectangle, but the angles between its edges are not constrained to ninety\ndegrees. The parameter p1 sets the first vertex and the subsequest points\nshould proceed clockwise or counter-clockwise around the defined shape.", "rendered": " A quad is a quadrilateral, a four sided polygon. It is similar to a\nrectangle, but the angles between its edges are not constrained to ninety\ndegrees. The parameter p1 sets the first vertex and the subsequest points\nshould proceed clockwise or counter-clockwise around the defined shape.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quadf", "title": "quadf", "contents": "quadf float float float float float float float float float float float float float float float float Reprocessing_Types Reprocessing_Types Types glEnvT unit unit p1 p2 p3 p4 ", "rendered": "<h4 class='item'>let quadf = (\n    ~p1: (float, float),\n    ~p2: (float, float),\n    ~p3: (float, float),\n    ~p4: (float, float),\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipse", "title": "ellipse", "contents": "This is the same as ellipsef, but converts all its integer arguments to\nfloats as a convenience.", "rendered": "This is the same as <code>ellipsef</code>, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipse", "title": "ellipse", "contents": " Draws an ellipse (oval) to the screen. An ellipse with equal width and\nheight is a circle.", "rendered": " Draws an ellipse (oval) to the screen. An ellipse with equal width and\nheight is a circle.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipse", "title": "ellipse", "contents": "ellipse int int int int int int int int Reprocessing_Types Reprocessing_Types Types glEnvT unit unit center radx rady ", "rendered": "<h4 class='item'>let ellipse = (\n    ~center: (int, int),\n    ~radx: int,\n    ~rady: int,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipsef", "title": "ellipsef", "contents": " Draws an ellipse (oval) to the screen. An ellipse with equal width and\nheight is a circle.", "rendered": " Draws an ellipse (oval) to the screen. An ellipse with equal width and\nheight is a circle.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipsef", "title": "ellipsef", "contents": "ellipsef float float float float float float float float Reprocessing_Types Reprocessing_Types Types glEnvT unit unit center radx rady ", "rendered": "<h4 class='item'>let ellipsef = (\n    ~center: (float, float),\n    ~radx: float,\n    ~rady: float,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-line", "title": "line", "contents": "This is the same as linef, but converts all its integer arguments to floats\nas a convenience.", "rendered": "This is the same as <code>linef</code>, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-line", "title": "line", "contents": " Draws a line (a direct path between two points) to the screen.\nTo color a line, use the stroke function. A line cannot be filled,\ntherefore the fill function will not affect the color of a line. Lines are\ndrawn with a width of one pixel by default, but this can be changed with\nthe strokeWeight function.", "rendered": " Draws a line (a direct path between two points) to the screen.\nTo color a line, use the <code>stroke</code> function. A line cannot be filled,\ntherefore the <code>fill</code> function will not affect the color of a line. Lines are\ndrawn with a width of one pixel by default, but this can be changed with\nthe <code>strokeWeight</code> function.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-line", "title": "line", "contents": "line int int int int int int int int Reprocessing_Types Reprocessing_Types Types glEnvT unit unit p1 p2 ", "rendered": "<h4 class='item'>let line = (\n    ~p1: (int, int),\n    ~p2: (int, int),\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-linef", "title": "linef", "contents": " Draws a line (a direct path between two points) to the screen.\nTo color a line, use the stroke function. A line cannot be filled,\ntherefore the fill function will not affect the color of a line. Lines are\ndrawn with a width of one pixel by default, but this can be changed with\nthe strokeWeight function.", "rendered": " Draws a line (a direct path between two points) to the screen.\nTo color a line, use the <code>stroke</code> function. A line cannot be filled,\ntherefore the <code>fill</code> function will not affect the color of a line. Lines are\ndrawn with a width of one pixel by default, but this can be changed with\nthe <code>strokeWeight</code> function.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-linef", "title": "linef", "contents": "linef float float float float float float float float Reprocessing_Types Reprocessing_Types Types glEnvT unit unit p1 p2 ", "rendered": "<h4 class='item'>let linef = (\n    ~p1: (float, float),\n    ~p2: (float, float),\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-curve", "title": "curve", "contents": " Draws a curved line on the screen. The first parameter specifies\nthe beginning control point and the last parameter specifies the ending\ncontrol point. The middle parameters specify the start and stop of the curve.", "rendered": " Draws a curved line on the screen. The first parameter specifies\nthe beginning control point and the last parameter specifies the ending\ncontrol point. The middle parameters specify the start and stop of the curve.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-curve", "title": "curve", "contents": "curve float float float float float float float float float float float float float float float float Reprocessing_Common Reprocessing_Common glEnv unit unit     ", "rendered": "<h4 class='item'>let curve = (\n    (float, float),\n    (float, float),\n    (float, float),\n    (float, float),\n    Reprocessing_Common.glEnv\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rect", "title": "rect", "contents": "This is the same as rectf, but converts all its integer arguments to floats\nas a convenience.", "rendered": "This is the same as <code>rectf</code>, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rect", "title": "rect", "contents": " Draws a rectangle to the screen. A rectangle is a four-sided shape with\nevery angle at ninety degrees.", "rendered": " Draws a rectangle to the screen. A rectangle is a four-sided shape with\nevery angle at ninety degrees.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rect", "title": "rect", "contents": "rect int int int int int int int int Reprocessing_Types Reprocessing_Types Types glEnvT unit unit pos width height ", "rendered": "<h4 class='item'>let rect = (\n    ~pos: (int, int),\n    ~width: int,\n    ~height: int,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectf", "title": "rectf", "contents": " Draws a rectangle to the screen. A rectangle is a four-sided shape with\nevery angle at ninety degrees.", "rendered": " Draws a rectangle to the screen. A rectangle is a four-sided shape with\nevery angle at ninety degrees.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectf", "title": "rectf", "contents": "rectf float float float float float float float float Reprocessing_Types Reprocessing_Types Types glEnvT unit unit pos width height ", "rendered": "<h4 class='item'>let rectf = (\n    ~pos: (float, float),\n    ~width: float,\n    ~height: float,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImagef", "title": "subImagef", "contents": "This function is useful for a spritesheet-style of\ndrawing strategy.", "rendered": "This function is useful for a spritesheet-style of\ndrawing strategy.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImagef", "title": "subImagef", "contents": " The subImagef function draws a section of an image to the\ndisplay window. The image should be loaded using the\nloadImage function. The image is displayed at the size\nspecified by width and height.  texPos, texWidth, and\ntexHeight describe the section of the full image that\nshould be drawn.", "rendered": " The <code>subImagef</code> function draws a section of an image to the\ndisplay window. The image should be loaded using the\n<code>loadImage</code> function. The image is displayed at the size\nspecified by width and height.  texPos, texWidth, and\ntexHeight describe the section of the full image that\nshould be drawn.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImagef", "title": "subImagef", "contents": "subImagef Reprocessing_Types Reprocessing_Types Types imageT float float float float float float float float int int int int int int int int Reprocessing_Types Reprocessing_Types Types glEnvT unit unit  pos width height texPos texWidth texHeight ", "rendered": "<h4 class='item'>let subImagef = (\n    Reprocessing_Types.Types.imageT,\n    ~pos: (float, float),\n    ~width: float,\n    ~height: float,\n    ~texPos: (int, int),\n    ~texWidth: int,\n    ~texHeight: int,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImage", "title": "subImage", "contents": "This function is useful for a spritesheet-style of\ndrawing strategy.", "rendered": "This function is useful for a spritesheet-style of\ndrawing strategy.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImage", "title": "subImage", "contents": " The subImage function draws a section of an image to the\ndisplay window. The image should be loaded using the\nloadImage function. The image is displayed at the size\nspecified by width and height.  texPos, texWidth, and\ntexHeight describe the section of the full image that\nshould be drawn.", "rendered": " The <code>subImage</code> function draws a section of an image to the\ndisplay window. The image should be loaded using the\n<code>loadImage</code> function. The image is displayed at the size\nspecified by width and height.  texPos, texWidth, and\ntexHeight describe the section of the full image that\nshould be drawn.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImage", "title": "subImage", "contents": "subImage Reprocessing_Types Reprocessing_Types Types imageT int int int int int int int int int int int int int int int int Reprocessing_Types Reprocessing_Types Types glEnvT unit unit  pos width height texPos texWidth texHeight ", "rendered": "<h4 class='item'>let subImage = (\n    Reprocessing_Types.Types.imageT,\n    ~pos: (int, int),\n    ~width: int,\n    ~height: int,\n    ~texPos: (int, int),\n    ~texWidth: int,\n    ~texHeight: int,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-image", "title": "image", "contents": " The image function draws an image to the display window.\nThe image should be loaded using the loadImage function.\nThe image is displayed at its original size unless width and\nheight are optionally specified.", "rendered": " The <code>image</code> function draws an image to the display window.\nThe image should be loaded using the <code>loadImage</code> function.\nThe image is displayed at its original size unless width and\nheight are optionally specified.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-image", "title": "image", "contents": "image Reprocessing_Types Reprocessing_Types Types imageT int int int int option option int int option option int int Reprocessing_Types Reprocessing_Types Types glEnvT unit unit  pos width height ", "rendered": "<h4 class='item'>let image = (\n    Reprocessing_Types.Types.imageT,\n    ~pos: (int, int),\n    ~?width: option(int),\n    ~?height: option(int),\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-loadImage", "title": "loadImage", "contents": " Loads an image and returns a handle to it. This will lazily load and\nattempting to draw an image that has not finished loading will result\nin nothing being drawn.\nIn general, all images should be loaded in setup to preload them at\nthe start of the program.\nIf isPixel is set to true, then when scaling the image, it will use\nGL_NEAREST (you want this setting if your image is meant to look\npixelated)", "rendered": " Loads an image and returns a handle to it. This will lazily load and\nattempting to draw an image that has not finished loading will result\nin nothing being drawn.\nIn general, all images should be loaded in <code>setup</code> to preload them at\nthe start of the program.\nIf isPixel is set to true, then when scaling the image, it will use\nGL_NEAREST (you want this setting if your image is meant to look\npixelated)", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-loadImage", "title": "loadImage", "contents": "loadImage string string option option bool bool Reprocessing_Types Reprocessing_Types Types glEnvT Reprocessing_Types Reprocessing_Types Types imageT filename isPixel ", "rendered": "<h4 class='item'>let loadImage = (\n    ~filename: string,\n    ~?isPixel: option(bool),\n    Reprocessing_Types.Types.glEnvT\n) => Reprocessing_Types.Types.imageT</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popMatrix", "title": "popMatrix", "contents": " Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires\nunderstanding the concept of a matrix stack. The pushMatrix() function saves the current coordinate system to\nthe stack and popMatrix() restores the prior coordinate system. pushMatrix() and popMatrix() are used in\nconjuction with the other transformation methods and may be embedded to control the scope of the transformations.", "rendered": " Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires\nunderstanding the concept of a matrix stack. The pushMatrix() function saves the current coordinate system to\nthe stack and popMatrix() restores the prior coordinate system. pushMatrix() and popMatrix() are used in\nconjuction with the other transformation methods and may be embedded to control the scope of the transformations.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popMatrix", "title": "popMatrix", "contents": "popMatrix Reprocessing_Types Reprocessing_Types Types glEnvT unit unit ", "rendered": "<h4 class='item'>let popMatrix = (Reprocessing_Types.Types.glEnvT) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushMatrix", "title": "pushMatrix", "contents": " Pushes the current transformation matrix onto the matrix stack. Understanding pushMatrix() and popMatrix()\nrequires understanding the concept of a matrix stack. The pushMatrix() function saves the current coordinate\nsystem to the stack and popMatrix() restores the prior coordinate system. pushMatrix() and popMatrix() are\nused in conjuction with the other transformation methods and may be embedded to control the scope of\nthe transformations.", "rendered": " Pushes the current transformation matrix onto the matrix stack. Understanding pushMatrix() and popMatrix()\nrequires understanding the concept of a matrix stack. The pushMatrix() function saves the current coordinate\nsystem to the stack and popMatrix() restores the prior coordinate system. pushMatrix() and popMatrix() are\nused in conjuction with the other transformation methods and may be embedded to control the scope of\nthe transformations.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushMatrix", "title": "pushMatrix", "contents": "pushMatrix Reprocessing_Types Reprocessing_Types Types glEnvT unit unit ", "rendered": "<h4 class='item'>let pushMatrix = (Reprocessing_Types.Types.glEnvT) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popStyle", "title": "popStyle", "contents": "The style information controlled by the following functions are included in\nthe style: fill, stroke, strokeWeight", "rendered": "The style information controlled by the following functions are included in\nthe style: fill, stroke, strokeWeight", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popStyle", "title": "popStyle", "contents": " The pushStyle function saves the current style settings and\npopStyle restores the prior settings; these functions are always used\ntogether. They allow you to change the style settings and later return to\nwhat you had. When a new style is started with pushStyle, it builds on the\ncurrent style information. The pushStyle and popStyle functions can be\nembedded to provide more control.", "rendered": " The <code>pushStyle</code> function saves the current style settings and\n<code>popStyle</code> restores the prior settings; these functions are always used\ntogether. They allow you to change the style settings and later return to\nwhat you had. When a new style is started with <code>pushStyle</code>, it builds on the\ncurrent style information. The <code>pushStyle</code> and <code>popStyle</code> functions can be\nembedded to provide more control.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popStyle", "title": "popStyle", "contents": "popStyle Reprocessing_Types Reprocessing_Types Types glEnvT unit unit ", "rendered": "<h4 class='item'>let popStyle = (Reprocessing_Types.Types.glEnvT) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushStyle", "title": "pushStyle", "contents": "The style information controlled by the following functions are included in\nthe style: fill, stroke, strokeWeight", "rendered": "The style information controlled by the following functions are included in\nthe style: fill, stroke, strokeWeight", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushStyle", "title": "pushStyle", "contents": " The pushStyle function saves the current style settings and popStyle\nrestores the prior settings. Note that these functions are always used\ntogether. They allow you to change the style settings and later return to\nwhat you had. When a new style is started with pushStyle, it builds on the\ncurrent style information. The pushStyle and popStyle functions can be\nembedded to provide more control.", "rendered": " The <code>pushStyle</code> function saves the current style settings and <code>popStyle</code>\nrestores the prior settings. Note that these functions are always used\ntogether. They allow you to change the style settings and later return to\nwhat you had. When a new style is started with <code>pushStyle</code>, it builds on the\ncurrent style information. The <code>pushStyle</code> and <code>popStyle</code> functions can be\nembedded to provide more control.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushStyle", "title": "pushStyle", "contents": "pushStyle Reprocessing_Types Reprocessing_Types Types glEnvT unit unit ", "rendered": "<h4 class='item'>let pushStyle = (Reprocessing_Types.Types.glEnvT) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": "rectMode(Radius) also uses the position of rect() as the shape&#39;s center point,\nbut uses the third and fourth parameters to specify half of the shapes&#39;s width\nand height.", "rendered": "rectMode(Radius) also uses the position of rect() as the shape&#39;s center point,\nbut uses the third and fourth parameters to specify half of the shapes&#39;s width\nand height.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": "rectMode(Center) interprets the position of rect() as the shape&#39;s center point,\nwhile the third and fourth parameters are its width and height.", "rendered": "rectMode(Center) interprets the position of rect() as the shape&#39;s center point,\nwhile the third and fourth parameters are its width and height.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": "The default mode is rectMode(Corner), which interprets the position of rect()\nas the upper-left corner of the shape, while the third and fourth parameters\nare its width and height.", "rendered": "The default mode is rectMode(Corner), which interprets the position of rect()\nas the upper-left corner of the shape, while the third and fourth parameters\nare its width and height.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": " Sets the style to modify the location from which rectangles are drawn by\nchanging the way in which parameters given to rect() and rectf() are intepreted.", "rendered": " Sets the style to modify the location from which rectangles are drawn by\nchanging the way in which parameters given to rect() and rectf() are intepreted.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": "rectMode Reprocessing_Types Reprocessing_Types Types rectModeT Reprocessing_Types Reprocessing_Types Types glEnvT unit unit  ", "rendered": "<h4 class='item'>let rectMode = (\n    Reprocessing_Types.Types.rectModeT,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-strokeCap", "title": "strokeCap", "contents": " Sets the style for rendering line endings. These ends are either squared,\nextended, or rounded.", "rendered": " Sets the style for rendering line endings. These ends are either squared,\nextended, or rounded.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-strokeCap", "title": "strokeCap", "contents": "strokeCap Reprocessing_Types Reprocessing_Types Types strokeCapT Reprocessing_Types Reprocessing_Types Types glEnvT unit unit  ", "rendered": "<h4 class='item'>let strokeCap = (\n    Reprocessing_Types.Types.strokeCapT,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-strokeWeight", "title": "strokeWeight", "contents": " Sets the width of the stroke used for lines, points, and the border around\nshapes. All widths are set in units of pixels.", "rendered": " Sets the width of the stroke used for lines, points, and the border around\nshapes. All widths are set in units of pixels.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-strokeWeight", "title": "strokeWeight", "contents": "strokeWeight int int Reprocessing_Types Reprocessing_Types Types glEnvT unit unit  ", "rendered": "<h4 class='item'>let strokeWeight = (\n    int,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noStroke", "title": "noStroke", "contents": " Disables drawing the stroke (outline). If both noStroke() and noFill()\nare called, nothing will be drawn to the screen.", "rendered": " Disables drawing the stroke (outline). If both noStroke() and noFill()\nare called, nothing will be drawn to the screen.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noStroke", "title": "noStroke", "contents": "noStroke Reprocessing_Types Reprocessing_Types Types glEnvT unit unit ", "rendered": "<h4 class='item'>let noStroke = (Reprocessing_Types.Types.glEnvT) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-stroke", "title": "stroke", "contents": " Sets the color used to draw lines and borders around shapes. ", "rendered": " Sets the color used to draw lines and borders around shapes. ", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-stroke", "title": "stroke", "contents": "stroke Reprocessing_Types Reprocessing_Types Types colorT Reprocessing_Types Reprocessing_Types Types glEnvT unit unit  ", "rendered": "<h4 class='item'>let stroke = (\n    Reprocessing_Types.Types.colorT,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noTint", "title": "noTint", "contents": " Removes the current fill value for displaying images and reverts to displaying\nimages with their original hues.", "rendered": " Removes the current fill value for displaying images and reverts to displaying\nimages with their original hues.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noTint", "title": "noTint", "contents": "noTint Reprocessing_Types Reprocessing_Types Types glEnvT unit unit ", "rendered": "<h4 class='item'>let noTint = (Reprocessing_Types.Types.glEnvT) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-tint", "title": "tint", "contents": " Sets the fill value for displaying images. Images can be tinted to specified colors\nor made transparent by including an alpha value.", "rendered": " Sets the fill value for displaying images. Images can be tinted to specified colors\nor made transparent by including an alpha value.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-tint", "title": "tint", "contents": "tint Reprocessing_Types Reprocessing_Types Types colorT Reprocessing_Types Reprocessing_Types Types glEnvT unit unit  ", "rendered": "<h4 class='item'>let tint = (\n    Reprocessing_Types.Types.colorT,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noFill", "title": "noFill", "contents": " Disables filling geometry. If both noStroke and noFill are called,\nnothing will be drawn to the screen.", "rendered": " Disables filling geometry. If both <code>noStroke</code> and <code>noFill</code> are called,\nnothing will be drawn to the screen.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noFill", "title": "noFill", "contents": "noFill Reprocessing_Types Reprocessing_Types Types glEnvT unit unit ", "rendered": "<h4 class='item'>let noFill = (Reprocessing_Types.Types.glEnvT) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-fill", "title": "fill", "contents": " Sets the color used to fill shapes.", "rendered": " Sets the color used to fill shapes.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-fill", "title": "fill", "contents": "fill Reprocessing_Types Reprocessing_Types Types colorT Reprocessing_Types Reprocessing_Types Types glEnvT unit unit  ", "rendered": "<h4 class='item'>let fill = (\n    Reprocessing_Types.Types.colorT,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-shear", "title": "shear", "contents": " The shear() function shears the matrix along the axes the amount\nspecified by the angle parameters. Angles should be specified in radians\n(values from 0 to PI*2) or converted to radians with the Utils.radians()\nfunction.", "rendered": " The shear() function shears the matrix along the axes the amount\nspecified by the angle parameters. Angles should be specified in radians\n(values from 0 to PI*2) or converted to radians with the Utils.radians()\nfunction.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-shear", "title": "shear", "contents": "shear float float float float Reprocessing_Types Reprocessing_Types Types glEnvT unit unit x y ", "rendered": "<h4 class='item'>let shear = (\n    ~x: float,\n    ~y: float,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-scale", "title": "scale", "contents": " The scale() function increases or decreases the size of a shape by expanding\nand contracting vertices.", "rendered": " The scale() function increases or decreases the size of a shape by expanding\nand contracting vertices.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-scale", "title": "scale", "contents": "scale float float float float Reprocessing_Types Reprocessing_Types Types glEnvT unit unit x y ", "rendered": "<h4 class='item'>let scale = (\n    ~x: float,\n    ~y: float,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rotate", "title": "rotate", "contents": "Technically, rotate multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by pushMatrix\nand popMatrix.", "rendered": "Technically, <code>rotate</code> multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by <code>pushMatrix</code>\nand <code>popMatrix</code>.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rotate", "title": "rotate", "contents": "The coordinates are always rotated around their relative position to the\norigin. Positive numbers rotate objects in a clockwise direction and\nnegative numbers rotate in the couterclockwise direction. Transformations\napply to everything that happens afterward, and subsequent calls to the\nfunction compound the effect. For example, calling\nrotate Constants.pi/2. env once and then calling rotate Constants.pi/2. env\na second time is the same as a single rotate Constants.pi env. All\ntranformations are reset when draw begins again.", "rendered": "The coordinates are always rotated around their relative position to the\norigin. Positive numbers rotate objects in a clockwise direction and\nnegative numbers rotate in the couterclockwise direction. Transformations\napply to everything that happens afterward, and subsequent calls to the\nfunction compound the effect. For example, calling\n<code>rotate Constants.pi/2. env</code> once and then calling <code>rotate Constants.pi/2. env</code>\na second time is the same as a single <code>rotate Constants.pi env</code>. All\ntranformations are reset when <code>draw</code> begins again.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rotate", "title": "rotate", "contents": " Rotates the amount specified by the angle parameter. Angles must be\nspecified in radians (values from 0 to two_pi), or they can be converted\nfrom degrees to radians with the radians function.", "rendered": " Rotates the amount specified by the angle parameter. Angles must be\nspecified in radians (values from 0 to two_pi), or they can be converted\nfrom degrees to radians with the <code>radians</code> function.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rotate", "title": "rotate", "contents": "rotate float float Reprocessing_Types Reprocessing_Types Types glEnvT unit unit  ", "rendered": "<h4 class='item'>let rotate = (\n    float,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-translate", "title": "translate", "contents": "Transformations are cumulative and apply to everything that happens\nafter and subsequent calls to the function accumulates the effect.\nFor example, calling translate dx::50 dy::0 env and then\ntranslate dx::20 dy::0 env is the same as translate dx::70 dy::0 env.\nIf translate is called within draw, the transformation is reset\nwhen the loop begins again. This function can be further controlled\nby using pushMatrix and popMatrix.", "rendered": "Transformations are cumulative and apply to everything that happens\nafter and subsequent calls to the function accumulates the effect.\nFor example, calling <code>translate dx::50 dy::0 env</code> and then\n<code>translate dx::20 dy::0 env</code> is the same as <code>translate dx::70 dy::0 env</code>.\nIf <code>translate</code> is called within <code>draw</code>, the transformation is reset\nwhen the loop begins again. This function can be further controlled\nby using <code>pushMatrix</code> and <code>popMatrix</code>.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-translate", "title": "translate", "contents": " Specifies an amount to displace objects within the display window.\nThe dx parameter specifies left/right translation, the dy parameter\nspecifies up/down translation.", "rendered": " Specifies an amount to displace objects within the display window.\nThe dx parameter specifies left/right translation, the dy parameter\nspecifies up/down translation.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-translate", "title": "translate", "contents": "translate float float float float Reprocessing_Types Reprocessing_Types Types glEnvT unit unit x y ", "rendered": "<h4 class='item'>let translate = (\n    ~x: float,\n    ~y: float,\n    Reprocessing_Types.Types.glEnvT\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html", "title": "Reprocessing_Draw", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#Reprocessing_Draw", "title": "Reprocessing_Draw", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Constants.html#value-tau", "title": "tau", "contents": " tau is a mathematical constant with the value 6.2831855. It is the circle\nconstant relating the circumference of a circle to its linear dimension, the\nratio of the circumference of a circle to its radius. It has the same value\nas two_pi.", "rendered": " tau is a mathematical constant with the value 6.2831855. It is the circle\nconstant relating the circumference of a circle to its linear dimension, the\nratio of the circumference of a circle to its radius. It has the same value\nas two_pi.", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-tau", "title": "tau", "contents": "tau float float", "rendered": "<h4 class='item'>let tau = float</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-two_pi", "title": "two_pi", "contents": " two_pi is a mathematical constant with the value 6.2831855. It is twice the\nratio of the circumference of a circle to its diameter.", "rendered": " two_pi is a mathematical constant with the value 6.2831855. It is twice the\nratio of the circumference of a circle to its diameter.", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-two_pi", "title": "two_pi", "contents": "two_pi float float", "rendered": "<h4 class='item'>let two_pi = float</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-quarter_pi", "title": "quarter_pi", "contents": " quarter_pi is a mathematical constant with the value 0.7853982. It is one\nquarter the ratio of the circumference of a circle to its diameter.", "rendered": " quarter_pi is a mathematical constant with the value 0.7853982. It is one\nquarter the ratio of the circumference of a circle to its diameter.", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-quarter_pi", "title": "quarter_pi", "contents": "quarter_pi float float", "rendered": "<h4 class='item'>let quarter_pi = float</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-half_pi", "title": "half_pi", "contents": " half_pi is a mathematical constant with the value 1.5707964. It is half\nthe ratio of the circumference of a circle to its diameter", "rendered": " half_pi is a mathematical constant with the value 1.5707964. It is half\nthe ratio of the circumference of a circle to its diameter", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-half_pi", "title": "half_pi", "contents": "half_pi float float", "rendered": "<h4 class='item'>let half_pi = float</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-pi", "title": "pi", "contents": " pi is a mathematical constant with the value 3.1415927. It is the ratio of\nthe circumference of a circle to its diameter. It is useful in combination\nwith the trigonometric functions sin and cos.", "rendered": " pi is a mathematical constant with the value 3.1415927. It is the ratio of\nthe circumference of a circle to its diameter. It is useful in combination\nwith the trigonometric functions <code>sin</code> and <code>cos</code>.", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-pi", "title": "pi", "contents": "pi float float", "rendered": "<h4 class='item'>let pi = float</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-blue", "title": "blue", "contents": " Convenience constant for the color blue ", "rendered": " Convenience constant for the color blue ", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-blue", "title": "blue", "contents": "blue Reprocessing_Common Reprocessing_Common colorT", "rendered": "<h4 class='item'>let blue = Reprocessing_Common.colorT</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-green", "title": "green", "contents": " Convenience constant for the color green ", "rendered": " Convenience constant for the color green ", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-green", "title": "green", "contents": "green Reprocessing_Common Reprocessing_Common colorT", "rendered": "<h4 class='item'>let green = Reprocessing_Common.colorT</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-red", "title": "red", "contents": " Convenience constant for the color red ", "rendered": " Convenience constant for the color red ", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-red", "title": "red", "contents": "red Reprocessing_Common Reprocessing_Common colorT", "rendered": "<h4 class='item'>let red = Reprocessing_Common.colorT</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-black", "title": "black", "contents": " Convenience constant for the color black ", "rendered": " Convenience constant for the color black ", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-black", "title": "black", "contents": "black Reprocessing_Common Reprocessing_Common colorT", "rendered": "<h4 class='item'>let black = Reprocessing_Common.colorT</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-white", "title": "white", "contents": " Convenience constant for the color white ", "rendered": " Convenience constant for the color white ", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-white", "title": "white", "contents": "white Reprocessing_Common Reprocessing_Common colorT", "rendered": "<h4 class='item'>let white = Reprocessing_Common.colorT</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html", "title": "Reprocessing_Constants", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#Reprocessing_Constants", "title": "Reprocessing_Constants", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Common.html#value-split", "title": "split", "contents": "split string string char char list list string string  sep", "rendered": "<h4 class='item'>let split = (string, ~sep: char) => list(string)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-append_char", "title": "append_char", "contents": "append_char string string char char string string  ", "rendered": "<h4 class='item'>let append_char = (string, char) => string</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-read", "title": "read", "contents": "read string string string string ", "rendered": "<h4 class='item'>let read = (string) => string</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.create", "title": "Stream.create", "contents": "create string string t t ", "rendered": "<h4 class='item'>let create = (string) => t</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.charsRemaining", "title": "Stream.charsRemaining", "contents": "charsRemaining string string int int int int ", "rendered": "<h4 class='item'>let charsRemaining = ((string, int)) => int</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.match_", "title": "Stream.match_", "contents": "match_ string string int int string string string string int int  ", "rendered": "<h4 class='item'>let match_ = ((string, int), string) => (string, int)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.popn", "title": "Stream.popn", "contents": "popn int int int int int int  ", "rendered": "<h4 class='item'>let popn = (('a, int), int) => ('a, int)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.skipWhite", "title": "Stream.skipWhite", "contents": "skipWhite t t t t ", "rendered": "<h4 class='item'>let skipWhite = (t) => t</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.peekn", "title": "Stream.peekn", "contents": "peekn string string int int int int option option string string  ", "rendered": "<h4 class='item'>let peekn = ((string, int), int) => option(string)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.popch", "title": "Stream.popch", "contents": "popch t t t t ", "rendered": "<h4 class='item'>let popch = (t) => t</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.peekch", "title": "Stream.peekch", "contents": "peekch t t option option char char ", "rendered": "<h4 class='item'>let peekch = (t) => option(char)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.empty", "title": "Stream.empty", "contents": "empty list list", "rendered": "<h4 class='item'>let empty = list('a)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-Stream.t", "title": "Stream.t", "contents": "t string string int int", "rendered": "<h4 class='item'>type t = (string, int)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#module-Stream", "title": "Stream", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-glEnv", "title": "glEnv", "contents": "glEnv camera glCamera glCamera window Reasongl Reasongl Gl Window t gl Reasongl Reasongl Gl contextT vertexBuffer Reasongl Reasongl Gl bufferT elementBuffer Reasongl Reasongl Gl bufferT aVertexColor Reasongl Reasongl Gl attributeT aTextureCoord Reasongl Reasongl Gl attributeT aVertexPosition Reasongl Reasongl Gl attributeT pMatrixUniform Reasongl Reasongl Gl uniformT uSampler Reasongl Reasongl Gl uniformT batch batchT batchT keyboard keyboardT keyboardT mouse mouseT mouseT style styleT styleT styleStack list list styleT styleT frame frameT frameT matrix array array float float matrixStack list list array array float float size sizeT sizeT", "rendered": "<h4 class='item'>type glEnv = {\n    camera: glCamera,\n    window: Reasongl.Gl.Window.t,\n    gl: Reasongl.Gl.contextT,\n    vertexBuffer: Reasongl.Gl.bufferT,\n    elementBuffer: Reasongl.Gl.bufferT,\n    aVertexColor: Reasongl.Gl.attributeT,\n    aTextureCoord: Reasongl.Gl.attributeT,\n    aVertexPosition: Reasongl.Gl.attributeT,\n    pMatrixUniform: Reasongl.Gl.uniformT,\n    uSampler: Reasongl.Gl.uniformT,\n    batch: batchT,\n    keyboard: keyboardT,\n    mouse: mouseT,\n    mut style: styleT,\n    mut styleStack: list(styleT),\n    mut frame: frameT,\n    mut matrix: array(float),\n    mut matrixStack: list(array(float)),\n    size: sizeT\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-batchT", "title": "batchT", "contents": "batchT vertexArray Reasongl Reasongl Gl Bigarray t float float Reasongl Reasongl Gl Bigarray float32_elt elementArray Reasongl Reasongl Gl Bigarray t int int Reasongl Reasongl Gl Bigarray int16_unsigned_elt vertexPtr int int elementPtr int int currTex option option Reasongl Reasongl Gl textureT nullTex Reasongl Reasongl Gl textureT", "rendered": "<h4 class='item'>type batchT = {\n    vertexArray: Reasongl.Gl.Bigarray.t(\n        float,\n        Reasongl.Gl.Bigarray.float32_elt\n    ),\n    elementArray: Reasongl.Gl.Bigarray.t(\n        int,\n        Reasongl.Gl.Bigarray.int16_unsigned_elt\n    ),\n    mut vertexPtr: int,\n    mut elementPtr: int,\n    mut currTex: option(Reasongl.Gl.textureT),\n    nullTex: Reasongl.Gl.textureT\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-soundT", "title": "soundT", "contents": "soundT Pervasives Pervasives ref soundLoadStatusT soundLoadStatusT", "rendered": "<h4 class='item'>type soundT = Pervasives.ref(soundLoadStatusT)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-soundLoadStatusT", "title": "soundLoadStatusT", "contents": "soundLoadStatusT float float bool bool Reasongl Reasongl Gl Audio t", "rendered": "<h4 class='item'>type soundLoadStatusT = \n    | Loading\n    | ShouldPlay(float, bool)\n    | Loaded(Reasongl.Gl.Audio.t)\n</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-imageT", "title": "imageT", "contents": "imageT Pervasives Pervasives ref option option _imageT _imageT", "rendered": "<h4 class='item'>type imageT = Pervasives.ref(option(_imageT))</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-_imageT", "title": "_imageT", "contents": "_imageT textureBuffer Reasongl Reasongl Gl textureT img Reasongl Reasongl Gl imageT height int int width int int", "rendered": "<h4 class='item'>type _imageT = {\n    textureBuffer: Reasongl.Gl.textureT,\n    img: Reasongl.Gl.imageT,\n    height: int,\n    width: int\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-vertexSize", "title": "vertexSize", "contents": "vertexSize int int", "rendered": "<h4 class='item'>let vertexSize = int</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-circularBufferSize", "title": "circularBufferSize", "contents": "circularBufferSize int int", "rendered": "<h4 class='item'>let circularBufferSize = int</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-sizeT", "title": "sizeT", "contents": "sizeT height int int width int int resizeable bool bool", "rendered": "<h4 class='item'>type sizeT = {\n    mut height: int,\n    mut width: int,\n    mut resizeable: bool\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-frameT", "title": "frameT", "contents": "frameT count int int rate int int deltaTime float float", "rendered": "<h4 class='item'>type frameT = {count: int, rate: int, deltaTime: float}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-keyboardT", "title": "keyboardT", "contents": "keyboardT keyCode Reprocessing_Events Reprocessing_Events keycodeT pressed KeySet KeySet t released KeySet KeySet t down KeySet KeySet t", "rendered": "<h4 class='item'>type keyboardT = {\n    mut keyCode: Reprocessing_Events.keycodeT,\n    mut pressed: KeySet.t,\n    mut released: KeySet.t,\n    mut down: KeySet.t\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-mouseT", "title": "mouseT", "contents": "mouseT pos int int int int prevPos int int int int pressed bool bool changedTouches list list float float float float float float touches Hashtbl Hashtbl t float float float float float float", "rendered": "<h4 class='item'>type mouseT = {\n    mut pos: (int, int),\n    mut prevPos: (int, int),\n    mut pressed: bool,\n    mut changedTouches: list((float, float, float)),\n    mut touches: Hashtbl.t(float, (float, float))\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-styleT", "title": "styleT", "contents": "styleT strokeColor option option colorT colorT strokeWeight int int strokeCap strokeCapT strokeCapT fillColor option option colorT colorT tintColor option option colorT colorT rectMode rectModeT rectModeT", "rendered": "<h4 class='item'>type styleT = {\n    strokeColor: option(colorT),\n    strokeWeight: int,\n    strokeCap: strokeCapT,\n    fillColor: option(colorT),\n    tintColor: option(colorT),\n    rectMode: rectModeT\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-colorT", "title": "colorT", "contents": "colorT r float float g float float b float float a float float", "rendered": "<h4 class='item'>type colorT = {r: float, g: float, b: float, a: float}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-glCamera", "title": "glCamera", "contents": "glCamera projectionMatrix Reasongl Reasongl Gl Mat4 t", "rendered": "<h4 class='item'>type glCamera = {projectionMatrix: Reasongl.Gl.Mat4.t}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-glState", "title": "glState", "contents": "glState Reasongl Reasongl Gl Window t", "rendered": "<h4 class='item'>type glState = Reasongl.Gl.Window.t</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-rectModeT", "title": "rectModeT", "contents": "rectModeT ", "rendered": "<h4 class='item'>type rectModeT = | Corner | Center | Radius\n</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-strokeCapT", "title": "strokeCapT", "contents": "strokeCapT ", "rendered": "<h4 class='item'>type strokeCapT = | Round | Square | Project\n</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html", "title": "Reprocessing_Common", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#Reprocessing_Common", "title": "Reprocessing_Common", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_ClientWrapper.html#value-init", "title": "init", "contents": "init option option string string array array string string Reasongl Reasongl Gl Window t unit unit  unit unit title argv ", "rendered": "<h4 class='item'>let init = (\n    ~?title: option(string),\n    ~argv: array(string),\n    (Reasongl.Gl.Window.t) => unit\n) => unit</h4>", "breadcrumb": "Reprocessing_ClientWrapper"},
{"href": "./api/Reprocessing_ClientWrapper.html", "title": "Reprocessing_ClientWrapper", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_ClientWrapper"},
{"href": "./api/Reprocessing_ClientWrapper.html#Reprocessing_ClientWrapper", "title": "Reprocessing_ClientWrapper", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_ClientWrapper"},
{"href": "./api/Reprocessing.html#value-run", "title": "run", "contents": " Entrypoint to the graphics library. The system\nis designed for you to return a self-defined &#39;state&#39;\nobject from setup, which will then be passed to every\ncallback you choose to implement. Updating the state\nis done by returning a different value from the callback.", "rendered": " Entrypoint to the graphics library. The system\nis designed for you to return a self-defined &#39;state&#39;\nobject from setup, which will then be passed to every\ncallback you choose to implement. Updating the state\nis done by returning a different value from the callback.", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#value-run", "title": "run", "contents": "run glEnvT glEnvT  option option glEnvT glEnvT   option option glEnvT glEnvT   option option glEnvT glEnvT   option option glEnvT glEnvT   option option glEnvT glEnvT   option option glEnvT glEnvT   option option glEnvT glEnvT   option option glEnvT glEnvT   option option glEnvT glEnvT   option option glEnvT glEnvT   option option glEnvT glEnvT   option option glEnvT glEnvT option option   option option string string unit unit unit unit setup draw mouseMove mouseDragged mouseDown mouseUp touchMove touchStart touchEnd keyPressed keyReleased keyTyped backPressed title ", "rendered": "<h4 class='item'>let run = (\n    ~setup: (glEnvT) => 'a,\n    ~?draw: option(('a, glEnvT) => 'a),\n    ~?mouseMove: option(('a, glEnvT) => 'a),\n    ~?mouseDragged: option(('a, glEnvT) => 'a),\n    ~?mouseDown: option(('a, glEnvT) => 'a),\n    ~?mouseUp: option(('a, glEnvT) => 'a),\n    ~?touchMove: option(('a, glEnvT) => 'a),\n    ~?touchStart: option(('a, glEnvT) => 'a),\n    ~?touchEnd: option(('a, glEnvT) => 'a),\n    ~?keyPressed: option(('a, glEnvT) => 'a),\n    ~?keyReleased: option(('a, glEnvT) => 'a),\n    ~?keyTyped: option(('a, glEnvT) => 'a),\n    ~?backPressed: option(('a, glEnvT) => option('a)),\n    ~?title: option(string),\n    unit\n) => unit</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#value-target", "title": "target", "contents": "target string string", "rendered": "<h4 class='item'>let target = string</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#value-hotreload", "title": "hotreload", "contents": "hotreload string string bool bool ", "rendered": "<h4 class='item'>let hotreload = (string) => bool</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#type-soundT", "title": "soundT", "contents": "soundT Reprocessing_Common Reprocessing_Common soundT", "rendered": "<h4 class='item'>type soundT = Reprocessing_Common.soundT</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#type-rectModeT", "title": "rectModeT", "contents": "rectModeT Reprocessing_Common Reprocessing_Common rectModeT", "rendered": "<h4 class='item'>type rectModeT = Reprocessing_Common.rectModeT</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#type-strokeCapT", "title": "strokeCapT", "contents": "strokeCapT Reprocessing_Common Reprocessing_Common strokeCapT", "rendered": "<h4 class='item'>type strokeCapT = Reprocessing_Common.strokeCapT</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#type-fontT", "title": "fontT", "contents": "fontT Reprocessing_Font Reprocessing_Font fontT", "rendered": "<h4 class='item'>type fontT = Reprocessing_Font.fontT</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#type-imageT", "title": "imageT", "contents": "imageT Reprocessing_Common Reprocessing_Common imageT", "rendered": "<h4 class='item'>type imageT = Reprocessing_Common.imageT</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#type-colorT", "title": "colorT", "contents": "colorT Reprocessing_Common Reprocessing_Common colorT", "rendered": "<h4 class='item'>type colorT = Reprocessing_Common.colorT</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#type-glEnvT", "title": "glEnvT", "contents": "glEnvT Reprocessing_Common Reprocessing_Common glEnv", "rendered": "<h4 class='item'>type glEnvT = Reprocessing_Common.glEnv</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#module-Constants", "title": "Constants", "contents": " Contains useful constants ", "rendered": " Contains useful constants ", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#module-Utils", "title": "Utils", "contents": " Contains utility functions ", "rendered": " Contains utility functions ", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#module-Events", "title": "Events", "contents": " Contains types for events. ", "rendered": " Contains types for events. ", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#module-Env", "title": "Env", "contents": " Contains functions having to do with the environment:\nie window properties, user input", "rendered": " Contains functions having to do with the environment:\nie window properties, user input", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#module-Draw", "title": "Draw", "contents": " Contains functions having to do with drawing to the screen ", "rendered": " Contains functions having to do with drawing to the screen ", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html", "title": "Reprocessing", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#Reprocessing", "title": "Reprocessing", "contents": "", "rendered": "", "breadcrumb": "Reprocessing"}]