[{"href": "./api/Reprocessing_Utils.html#value-intersectRectRect", "title": "intersectRectRect", "contents": " Determines if there is an intersection between two axis-aligned rectangles.\nrect1Pos and rect2Pos refer to the top left of the rectangles.\nrectW and rectH are the width and height of the rectangle.\nReturns true if the two shapes overlap.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-intersectRectRect", "title": "intersectRectRect", "contents": "let intersectRectRect = (\n    ~rect1Pos: (float, float),\n    ~rect1W: float,\n    ~rect1H: float,\n    ~rect2Pos: (float, float),\n    ~rect2W: float,\n    ~rect2H: float\n) => bool", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-intersectRectCircle", "title": "intersectRectCircle", "contents": " Determines if there is an intersection between a rectangle and a circle.\nrectPos refers to the top left of the rect and circlePos to the center of\nthe circle. rectW and rectH are the width and height of the rectangle and\ncircleRad is the radius of the circle.\nReturns true if the two shapes overlap.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-intersectRectCircle", "title": "intersectRectCircle", "contents": "let intersectRectCircle = (\n    ~rectPos: (float, float),\n    ~rectW: float,\n    ~rectH: float,\n    ~circlePos: (float, float),\n    ~circleRad: float\n) => bool", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-split", "title": "split", "contents": " The split function breaks a string into pieces using a character\nas the delimiter. The sep parameter specifies the character\nthat mark the boundaries between each piece. A list is returned\nthat contains each of the pieces.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-split", "title": "split", "contents": "let split = (string, ~sep: char) => list(string)", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noiseSeed", "title": "noiseSeed", "contents": " Sets the seed value for noise.  This will also affect the\nseed value for random and randomf.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noiseSeed", "title": "noiseSeed", "contents": "let noiseSeed = (int) => unit", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noise", "title": "noise", "contents": "Another way to adjust the character of the resulting sequence is the scale of\nthe input coordinates. As the function works within an infinite space, the\nvalue of the coordinates doesn&#39;t matter as such; only the distance between\nsuccessive coordinates is important (such as when using noise() within a loop).\nAs a general rule, the smaller the difference between coordinates, the smoother the resulting noise sequence. Steps of 0.005-0.03 work best for most applications, but this will differ depending on use.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noise", "title": "noise", "contents": "The actual noise structure is similar to that of an audio signal, in respect\nto the function&#39;s use of frequencies. Similar to the concept of harmonics in\nphysics, Perlin noise is computed over several octaves which are added together\nfor the final result.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noise", "title": "noise", "contents": "In contrast to the random() function, Perlin noise is defined in an infinite\nn-dimensional space, in which each pair of coordinates corresponds to a\nfixed semi-random value (fixed only for the lifespan of the program). The\nresulting value will always be between 0.0 and 1.0. The noise value can be\nanimated by moving through the noise space.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noise", "title": "noise", "contents": " Returns the Perlin noise value at specified coordinates. Perlin noise is a\nrandom sequence generator producing a more natural, harmonic succession of\nnumbers than that of the standard random() function. It was developed by Ken\nPerlin in the 1980s and has been used in graphical applications to generate\nprocedural textures, shapes, terrains, and other seemingly organic forms.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noise", "title": "noise", "contents": "let noise = (float, float, float) => float", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-radians", "title": "radians", "contents": " Converts a degree measurement to its corresponding value in radians.\nRadians and degrees are two ways of measuring the same thing. There are 360\ndegrees in a circle and 2*PI radians in a circle. For example, 90° = PI/2 =\n1.5707964. All trigonometric functions require their parameters to be\nspecified in radians.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-radians", "title": "radians", "contents": "let radians = (float) => float", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-degrees", "title": "degrees", "contents": " Converts a radian measurement to its corresponding value in degrees.\nRadians and degrees are two ways of measuring the same thing. There are 360\ndegrees in a circle and 2*PI radians in a circle. For example, 90° = PI/2 =\n1.5707964. All trigonometric functions require their parameters to be\nspecified in radians.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-degrees", "title": "degrees", "contents": "let degrees = (float) => float", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-mag", "title": "mag", "contents": "This is the same as magf, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-mag", "title": "mag", "contents": " Calculates the magnitude (or length) of a vector. A vector is a direction\nin space commonly used in computer graphics and linear algebra. Because it\nhas no &quot;start&quot; position, the magnitude of a vector can be thought of as the\ndistance from the coordinate 0,0 to its x,y value. Therefore, mag is a\nshortcut for writing dist (0, 0) (x, y).", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-mag", "title": "mag", "contents": "let mag = ((int, int)) => float", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-magf", "title": "magf", "contents": " Calculates the magnitude (or length) of a vector. A vector is a direction\nin space commonly used in computer graphics and linear algebra. Because it\nhas no &quot;start&quot; position, the magnitude of a vector can be thought of as the\ndistance from the coordinate 0,0 to its x,y value. Therefore, mag is a\nshortcut for writing dist (0, 0) (x, y).", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-magf", "title": "magf", "contents": "let magf = ((float, float)) => float", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-dist", "title": "dist", "contents": "This is the same as distf, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-dist", "title": "dist", "contents": " Calculates the distance between two points.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-dist", "title": "dist", "contents": "let dist = (~p1: (int, int), ~p2: (int, int)) => float", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-distf", "title": "distf", "contents": " Calculates the distance between two points. ", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-distf", "title": "distf", "contents": "let distf = (\n    ~p1: (float, float),\n    ~p2: (float, float)\n) => float", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-lerp", "title": "lerp", "contents": "This is the same as lerpf, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-lerp", "title": "lerp", "contents": " Calculates a number between two numbers at a specific increment. The\namt parameter is the amount to interpolate between the two values where 0.0\nequal to the low point, 0.1 is very near the low point, 0.5 is half-way\nin between, etc. The lerp function is convenient for creating motion along a\nstraight path and for drawing dotted lines.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-lerp", "title": "lerp", "contents": "let lerp = (~low: int, ~high: int, ~value: float) => int", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-lerpf", "title": "lerpf", "contents": " Calculates a number between two numbers at a specific increment. The\namt parameter is the amount to interpolate between the two values where 0.0\nequal to the low point, 0.1 is very near the low point, 0.5 is half-way\nin between, etc. The lerp function is convenient for creating motion along a\nstraight path and for drawing dotted lines.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-lerpf", "title": "lerpf", "contents": "let lerpf = (\n    ~low: float,\n    ~high: float,\n    ~value: float\n) => float", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomGaussian", "title": "randomGaussian", "contents": " Returns a float from a random series of numbers having a mean of 0 and\nstandard deviation of 1. Each time the randomGaussian function is called,\nit returns a number fitting a Gaussian, or normal, distribution. There is\ntheoretically no minimum or maximum value that `randomGaussian might\nreturn. Rather, there is just a very low probability that values far from\nthe mean will be returned; and a higher probability that numbers near the\nmean will be returned.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomGaussian", "title": "randomGaussian", "contents": "let randomGaussian = (unit) => float", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomSeed", "title": "randomSeed", "contents": " Sets the seed value for random and randomf. By default, random\nproduces different results each time the program is run. Set the\nseed parameter to a constant to return the same pseudo-random\nnumbers each time the software is run.\nThis is equivalent to setting Random.init in ocaml/reason.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomSeed", "title": "randomSeed", "contents": "let randomSeed = (int) => unit", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-random", "title": "random", "contents": "This is the same as randomf, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-random", "title": "random", "contents": " Generates random numbers. Each time the random function is called, it\nreturns an unexpected value within the specified range. The top number is\nnot included.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-random", "title": "random", "contents": "let random = (~min: int, ~max: int) => int", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomf", "title": "randomf", "contents": " Generates random numbers. Each time the randomf function is called, it\nreturns an unexpected value within the specified range. The top number is\nnot included.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomf", "title": "randomf", "contents": "let randomf = (~min: float, ~max: float) => float", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-norm", "title": "norm", "contents": " Normalizes a number from another range into a value between 0 and 1.\nIdentical to remap ::value ::low ::high 0. 1.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-norm", "title": "norm", "contents": "let norm = (\n    ~value: float,\n    ~low: float,\n    ~high: float\n) => float", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-remap", "title": "remap", "contents": "This is the same as remapf, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-remap", "title": "remap", "contents": " Re-maps a number from one range to another.\ni.e. remapf value::5. start1::0. stop1::10. start2::10. stop2::20.\nwould give 15.\nUseful for scaling values.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-remap", "title": "remap", "contents": "let remap = (\n    ~value: int,\n    ~low1: int,\n    ~high1: int,\n    ~low2: int,\n    ~high2: int\n) => int", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-remapf", "title": "remapf", "contents": " Re-maps a number from one range to another.\ni.e. remapf value::5. start1::0. stop1::10. start2::10. stop2::20.\nwould give 15.\nUseful for scaling values.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-remapf", "title": "remapf", "contents": "let remapf = (\n    ~value: float,\n    ~low1: float,\n    ~high1: float,\n    ~low2: float,\n    ~high2: float\n) => float", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-constrain", "title": "constrain", "contents": " Constrains a value to not exceed a maximum and minimum value. ", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-constrain", "title": "constrain", "contents": "let constrain = (~amt: 'a, ~low: 'a, ~high: 'a) => 'a", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-pow", "title": "pow", "contents": " Facilitates exponential expressions. The pow() function is an efficient\nway of multiplying numbers by themselves (or their reciprocals) in large\nquantities.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-pow", "title": "pow", "contents": "let pow = (~base: int, ~exp: int) => int", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-sq", "title": "sq", "contents": " Squares a number (multiplies a number by itself). The result is always a\npositive number, as multiplying two negative numbers always yields a\npositive result.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-sq", "title": "sq", "contents": "let sq = (int) => int", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-round", "title": "round", "contents": " Calculates the integer closest to the input. For example,\nround 133.8 returns the value 134.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-round", "title": "round", "contents": "let round = (float) => float", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-colorf", "title": "colorf", "contents": "Components should be in the range 0.0 to 1.0.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-colorf", "title": "colorf", "contents": " Creates colors for storing in variables of the color datatype.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-colorf", "title": "colorf", "contents": "let colorf = (\n    ~r: float,\n    ~g: float,\n    ~b: float,\n    ~a: float\n) => Reprocessing_Types.Types.colorT", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-color", "title": "color", "contents": "Components should be in the range 0 to 255 (or 0x00 to 0xFF).", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-color", "title": "color", "contents": " Creates colors for storing in variables of the color datatype.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-color", "title": "color", "contents": "let color = (\n    ~r: int,\n    ~g: int,\n    ~b: int,\n    ~a: int\n) => Reprocessing_Types.Types.colorT", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html", "title": "Reprocessing_Utils", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#Reprocessing_Utils", "title": "Reprocessing_Utils", "contents": "", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Types.html#module-Types", "title": "Types", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html", "title": "Reprocessing_Types", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#Reprocessing_Types", "title": "Reprocessing_Types", "contents": "", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Shaders.html", "title": "Reprocessing_Shaders", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Shaders"},
{"href": "./api/Reprocessing_Shaders.html#Reprocessing_Shaders", "title": "Reprocessing_Shaders", "contents": "", "breadcrumb": "Reprocessing_Shaders"},
{"href": "./api/Reprocessing_Matrix.html#value-matinv", "title": "matinv", "contents": " Invert a matrix\n https://www.geometrictools.com/Documentation/LaplaceExpansionTheorem.pdf", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matinv", "title": "matinv", "contents": "let matinv = (array(float)) => array(float)", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matptmul", "title": "matptmul", "contents": " x   y = 1    who cares ", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matptmul", "title": "matptmul", "contents": "let matptmul = (array(float), (float, float)) => (\n    float,\n    float\n)", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matvecmul", "title": "matvecmul", "contents": " a   b = c   a6 + b7 + c8", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matvecmul", "title": "matvecmul", "contents": "let matvecmul = (array(float), array(float)) => unit", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matmatmul", "title": "matmatmul", "contents": " a b c   d e f = g h i   a6 + d7 + g8, b6 + e7 + h8, c6 + f7 + i8", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matmatmul", "title": "matmatmul", "contents": "let matmatmul = (array(float), array(float)) => unit", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html", "title": "Reprocessing_Matrix", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#Reprocessing_Matrix", "title": "Reprocessing_Matrix", "contents": "", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Internal.html#value-resetSize", "title": "resetSize", "contents": " Recomputes matrices while resetting size of window ", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-resetSize", "title": "resetSize", "contents": "let resetSize = (\n    Reprocessing_Common.glEnv,\n    int,\n    int\n) => unit", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html", "title": "Reprocessing_Internal", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#Reprocessing_Internal", "title": "Reprocessing_Internal", "contents": "", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Hotreload.html#module-NoHotreloading", "title": "NoHotreloading", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Hotreload.html", "title": "Reprocessing_Hotreload", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Hotreload.html#Reprocessing_Hotreload", "title": "Reprocessing_Hotreload", "contents": "", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Font.html#module-Font", "title": "Font", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html", "title": "Reprocessing_Font", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#Reprocessing_Font", "title": "Reprocessing_Font", "contents": "", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Events.html", "title": "Reprocessing_Events", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Events.html#Reprocessing_Events", "title": "Reprocessing_Events", "contents": "", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Env.html#value-localizePoint", "title": "localizePoint", "contents": " Localize a point in canvas coordinates to the current env&#39;s\n transformed coordinates", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-localizePoint", "title": "localizePoint", "contents": "let localizePoint = (\n    (int, int),\n    Reprocessing_Types.Types.glEnvT\n) => (int, int)", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-deltaTime", "title": "deltaTime", "contents": " Time in seconds since the last frame ", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-deltaTime", "title": "deltaTime", "contents": "let deltaTime = (Reprocessing_Types.Types.glEnvT) => float", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html", "title": "Reprocessing_Env", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#Reprocessing_Env", "title": "Reprocessing_Env", "contents": "", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Draw.html#value-background", "title": "background", "contents": " The background function sets the color used for the background of the\nProcessing window. The default background is black. This function is\ntypically used within draw to clear the display window at the beginning of\neach frame, but it can be used inside setup to set the background on the\nfirst frame of animation or if the backgound need only be set once.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-background", "title": "background", "contents": "let background = (\n    Reprocessing_Types.Types.colorT,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-clear", "title": "clear", "contents": " Clears the entire screen. Normally, background is used for this purpose,\nclear will have different results in web and native. ", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-clear", "title": "clear", "contents": "let clear = (Reprocessing_Types.Types.glEnvT) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-text", "title": "text", "contents": " Draws text to the screen.\nThe font should be loaded using the loadFont function.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-text", "title": "text", "contents": "let text = (\n    ~font: Reprocessing_Font.fontT,\n    ~body: string,\n    ~pos: (int, int),\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-loadFont", "title": "loadFont", "contents": " Loads a font and returns a handle to it. This will lazily load and\nattempting to draw an font that has not finished loading will result\nin nothing being drawn.\nIn general, all fonts should be loaded in setup to preload them at\nthe start of the program.\nIf isPixel is set to true, then when scaling the font, it will use\nGL_NEAREST (you want this setting if your font is meant to look\npixelated)", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-loadFont", "title": "loadFont", "contents": "let loadFont = (\n    ~filename: string,\n    ~?isPixel: option(bool),\n    Reprocessing_Types.Types.glEnvT\n) => Reprocessing_Font.fontT", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arc", "title": "arc", "contents": "This is the same as arcf, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arc", "title": "arc", "contents": " Draws an arc to the screen. Arcs are drawn along the outer edge of an\nellipse defined by the center, radx, and rady parameters. Use the\nstart and stop parameters to specify the angles (in radians) at which\nto draw the arc. isPie defines whether or not lines should be drawn to\nthe center at the start and stop points of the arc rather than simply\nconnecting the points.  If isOpen is true, no line will be drawn other\nthan the arc between start and stop.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arc", "title": "arc", "contents": "let arc = (\n    ~center: (int, int),\n    ~radx: int,\n    ~rady: int,\n    ~start: float,\n    ~stop: float,\n    ~isOpen: bool,\n    ~isPie: bool,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arcf", "title": "arcf", "contents": " Draws an arc to the screen. Arcs are drawn along the outer edge of an\nellipse defined by the center, radx, and rady parameters. Use the\nstart and stop parameters to specify the angles (in radians) at which\nto draw the arc. isPie defines whether or not lines should be drawn to\nthe center at the start and stop points of the arc rather than simply\nconnecting the points.  If isOpen is true, no line will be drawn other\nthan the arc between start and stop.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arcf", "title": "arcf", "contents": "let arcf = (\n    ~center: (float, float),\n    ~radx: float,\n    ~rady: float,\n    ~start: float,\n    ~stop: float,\n    ~isOpen: bool,\n    ~isPie: bool,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-bezier", "title": "bezier", "contents": " Draws a Bezier curve on the screen. These curves are defined by a\nseries of anchor and control points. The parameter p1 specifies the\nfirst anchor point and the last parameter specifies the other anchor\npoint. The middle parameters p2 and p3 specify the control points\nwhich define the shape of the curve. Bezier curves were developed\nby French engineer Pierre Bezier.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-bezier", "title": "bezier", "contents": "let bezier = (\n    ~p1: (float, float),\n    ~p2: (float, float),\n    ~p3: (float, float),\n    ~p4: (float, float),\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-triangle", "title": "triangle", "contents": "This is the same as trianglef, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-triangle", "title": "triangle", "contents": " A triangle is a plane created by connecting three points.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-triangle", "title": "triangle", "contents": "let triangle = (\n    ~p1: (int, int),\n    ~p2: (int, int),\n    ~p3: (int, int),\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-trianglef", "title": "trianglef", "contents": " A triangle is a plane created by connecting three points. ", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-trianglef", "title": "trianglef", "contents": "let trianglef = (\n    ~p1: (float, float),\n    ~p2: (float, float),\n    ~p3: (float, float),\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixel", "title": "pixel", "contents": "This is the same as pixelf, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixel", "title": "pixel", "contents": " Adds a single point with a radius defined by strokeWeight", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixel", "title": "pixel", "contents": "let pixel = (\n    ~pos: (int, int),\n    ~color: Reprocessing_Types.Types.colorT,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixelf", "title": "pixelf", "contents": " Adds a single point with a radius defined by strokeWeight ", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixelf", "title": "pixelf", "contents": "let pixelf = (\n    ~pos: (float, float),\n    ~color: Reprocessing_Types.Types.colorT,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quad", "title": "quad", "contents": "This is the same as quadf, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quad", "title": "quad", "contents": " A quad is a quadrilateral, a four sided polygon. It is similar to a\nrectangle, but the angles between its edges are not constrained to ninety\ndegrees. The parameter p1 sets the first vertex and the subsequest points\nshould proceed clockwise or counter-clockwise around the defined shape.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quad", "title": "quad", "contents": "let quad = (\n    ~p1: (int, int),\n    ~p2: (int, int),\n    ~p3: (int, int),\n    ~p4: (int, int),\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quadf", "title": "quadf", "contents": " A quad is a quadrilateral, a four sided polygon. It is similar to a\nrectangle, but the angles between its edges are not constrained to ninety\ndegrees. The parameter p1 sets the first vertex and the subsequest points\nshould proceed clockwise or counter-clockwise around the defined shape.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quadf", "title": "quadf", "contents": "let quadf = (\n    ~p1: (float, float),\n    ~p2: (float, float),\n    ~p3: (float, float),\n    ~p4: (float, float),\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipse", "title": "ellipse", "contents": "This is the same as ellipsef, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipse", "title": "ellipse", "contents": " Draws an ellipse (oval) to the screen. An ellipse with equal width and\nheight is a circle.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipse", "title": "ellipse", "contents": "let ellipse = (\n    ~center: (int, int),\n    ~radx: int,\n    ~rady: int,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipsef", "title": "ellipsef", "contents": " Draws an ellipse (oval) to the screen. An ellipse with equal width and\nheight is a circle.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipsef", "title": "ellipsef", "contents": "let ellipsef = (\n    ~center: (float, float),\n    ~radx: float,\n    ~rady: float,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-line", "title": "line", "contents": "This is the same as linef, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-line", "title": "line", "contents": " Draws a line (a direct path between two points) to the screen.\nTo color a line, use the stroke function. A line cannot be filled,\ntherefore the fill function will not affect the color of a line. Lines are\ndrawn with a width of one pixel by default, but this can be changed with\nthe strokeWeight function.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-line", "title": "line", "contents": "let line = (\n    ~p1: (int, int),\n    ~p2: (int, int),\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-linef", "title": "linef", "contents": " Draws a line (a direct path between two points) to the screen.\nTo color a line, use the stroke function. A line cannot be filled,\ntherefore the fill function will not affect the color of a line. Lines are\ndrawn with a width of one pixel by default, but this can be changed with\nthe strokeWeight function.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-linef", "title": "linef", "contents": "let linef = (\n    ~p1: (float, float),\n    ~p2: (float, float),\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-curve", "title": "curve", "contents": " Draws a curved line on the screen. The first parameter specifies\nthe beginning control point and the last parameter specifies the ending\ncontrol point. The middle parameters specify the start and stop of the curve.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-curve", "title": "curve", "contents": "let curve = (\n    (float, float),\n    (float, float),\n    (float, float),\n    (float, float),\n    Reprocessing_Common.glEnv\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rect", "title": "rect", "contents": "This is the same as rectf, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rect", "title": "rect", "contents": " Draws a rectangle to the screen. A rectangle is a four-sided shape with\nevery angle at ninety degrees.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rect", "title": "rect", "contents": "let rect = (\n    ~pos: (int, int),\n    ~width: int,\n    ~height: int,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectf", "title": "rectf", "contents": " Draws a rectangle to the screen. A rectangle is a four-sided shape with\nevery angle at ninety degrees.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectf", "title": "rectf", "contents": "let rectf = (\n    ~pos: (float, float),\n    ~width: float,\n    ~height: float,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImagef", "title": "subImagef", "contents": "This function is useful for a spritesheet-style of\ndrawing strategy.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImagef", "title": "subImagef", "contents": " The subImagef function draws a section of an image to the\ndisplay window. The image should be loaded using the\nloadImage function. The image is displayed at the size\nspecified by width and height.  texPos, texWidth, and\ntexHeight describe the section of the full image that\nshould be drawn.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImagef", "title": "subImagef", "contents": "let subImagef = (\n    Reprocessing_Types.Types.imageT,\n    ~pos: (float, float),\n    ~width: float,\n    ~height: float,\n    ~texPos: (int, int),\n    ~texWidth: int,\n    ~texHeight: int,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImage", "title": "subImage", "contents": "This function is useful for a spritesheet-style of\ndrawing strategy.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImage", "title": "subImage", "contents": " The subImage function draws a section of an image to the\ndisplay window. The image should be loaded using the\nloadImage function. The image is displayed at the size\nspecified by width and height.  texPos, texWidth, and\ntexHeight describe the section of the full image that\nshould be drawn.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImage", "title": "subImage", "contents": "let subImage = (\n    Reprocessing_Types.Types.imageT,\n    ~pos: (int, int),\n    ~width: int,\n    ~height: int,\n    ~texPos: (int, int),\n    ~texWidth: int,\n    ~texHeight: int,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-image", "title": "image", "contents": " The image function draws an image to the display window.\nThe image should be loaded using the loadImage function.\nThe image is displayed at its original size unless width and\nheight are optionally specified.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-image", "title": "image", "contents": "let image = (\n    Reprocessing_Types.Types.imageT,\n    ~pos: (int, int),\n    ~?width: option(int),\n    ~?height: option(int),\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-loadImage", "title": "loadImage", "contents": " Loads an image and returns a handle to it. This will lazily load and\nattempting to draw an image that has not finished loading will result\nin nothing being drawn.\nIn general, all images should be loaded in setup to preload them at\nthe start of the program.\nIf isPixel is set to true, then when scaling the image, it will use\nGL_NEAREST (you want this setting if your image is meant to look\npixelated)", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-loadImage", "title": "loadImage", "contents": "let loadImage = (\n    ~filename: string,\n    ~?isPixel: option(bool),\n    Reprocessing_Types.Types.glEnvT\n) => Reprocessing_Types.Types.imageT", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popMatrix", "title": "popMatrix", "contents": " Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires\nunderstanding the concept of a matrix stack. The pushMatrix() function saves the current coordinate system to\nthe stack and popMatrix() restores the prior coordinate system. pushMatrix() and popMatrix() are used in\nconjuction with the other transformation methods and may be embedded to control the scope of the transformations.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popMatrix", "title": "popMatrix", "contents": "let popMatrix = (Reprocessing_Types.Types.glEnvT) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushMatrix", "title": "pushMatrix", "contents": " Pushes the current transformation matrix onto the matrix stack. Understanding pushMatrix() and popMatrix()\nrequires understanding the concept of a matrix stack. The pushMatrix() function saves the current coordinate\nsystem to the stack and popMatrix() restores the prior coordinate system. pushMatrix() and popMatrix() are\nused in conjuction with the other transformation methods and may be embedded to control the scope of\nthe transformations.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushMatrix", "title": "pushMatrix", "contents": "let pushMatrix = (Reprocessing_Types.Types.glEnvT) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popStyle", "title": "popStyle", "contents": "The style information controlled by the following functions are included in\nthe style: fill, stroke, strokeWeight", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popStyle", "title": "popStyle", "contents": " The pushStyle function saves the current style settings and\npopStyle restores the prior settings; these functions are always used\ntogether. They allow you to change the style settings and later return to\nwhat you had. When a new style is started with pushStyle, it builds on the\ncurrent style information. The pushStyle and popStyle functions can be\nembedded to provide more control.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popStyle", "title": "popStyle", "contents": "let popStyle = (Reprocessing_Types.Types.glEnvT) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushStyle", "title": "pushStyle", "contents": "The style information controlled by the following functions are included in\nthe style: fill, stroke, strokeWeight", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushStyle", "title": "pushStyle", "contents": " The pushStyle function saves the current style settings and popStyle\nrestores the prior settings. Note that these functions are always used\ntogether. They allow you to change the style settings and later return to\nwhat you had. When a new style is started with pushStyle, it builds on the\ncurrent style information. The pushStyle and popStyle functions can be\nembedded to provide more control.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushStyle", "title": "pushStyle", "contents": "let pushStyle = (Reprocessing_Types.Types.glEnvT) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": "rectMode(Radius) also uses the position of rect() as the shape&#39;s center point,\nbut uses the third and fourth parameters to specify half of the shapes&#39;s width\nand height.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": "rectMode(Center) interprets the position of rect() as the shape&#39;s center point,\nwhile the third and fourth parameters are its width and height.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": "The default mode is rectMode(Corner), which interprets the position of rect()\nas the upper-left corner of the shape, while the third and fourth parameters\nare its width and height.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": " Sets the style to modify the location from which rectangles are drawn by\nchanging the way in which parameters given to rect() and rectf() are intepreted.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": "let rectMode = (\n    Reprocessing_Types.Types.rectModeT,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-strokeCap", "title": "strokeCap", "contents": " Sets the style for rendering line endings. These ends are either squared,\nextended, or rounded.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-strokeCap", "title": "strokeCap", "contents": "let strokeCap = (\n    Reprocessing_Types.Types.strokeCapT,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-strokeWeight", "title": "strokeWeight", "contents": " Sets the width of the stroke used for lines, points, and the border around\nshapes. All widths are set in units of pixels.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-strokeWeight", "title": "strokeWeight", "contents": "let strokeWeight = (\n    int,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noStroke", "title": "noStroke", "contents": " Disables drawing the stroke (outline). If both noStroke() and noFill()\nare called, nothing will be drawn to the screen.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noStroke", "title": "noStroke", "contents": "let noStroke = (Reprocessing_Types.Types.glEnvT) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-stroke", "title": "stroke", "contents": " Sets the color used to draw lines and borders around shapes. ", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-stroke", "title": "stroke", "contents": "let stroke = (\n    Reprocessing_Types.Types.colorT,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noTint", "title": "noTint", "contents": " Removes the current fill value for displaying images and reverts to displaying\nimages with their original hues.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noTint", "title": "noTint", "contents": "let noTint = (Reprocessing_Types.Types.glEnvT) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-tint", "title": "tint", "contents": " Sets the fill value for displaying images. Images can be tinted to specified colors\nor made transparent by including an alpha value.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-tint", "title": "tint", "contents": "let tint = (\n    Reprocessing_Types.Types.colorT,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noFill", "title": "noFill", "contents": " Disables filling geometry. If both noStroke and noFill are called,\nnothing will be drawn to the screen.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noFill", "title": "noFill", "contents": "let noFill = (Reprocessing_Types.Types.glEnvT) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-fill", "title": "fill", "contents": " Sets the color used to fill shapes.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-fill", "title": "fill", "contents": "let fill = (\n    Reprocessing_Types.Types.colorT,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-shear", "title": "shear", "contents": " The shear() function shears the matrix along the axes the amount\nspecified by the angle parameters. Angles should be specified in radians\n(values from 0 to PI*2) or converted to radians with the Utils.radians()\nfunction.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-shear", "title": "shear", "contents": "let shear = (\n    ~x: float,\n    ~y: float,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-scale", "title": "scale", "contents": " The scale() function increases or decreases the size of a shape by expanding\nand contracting vertices.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-scale", "title": "scale", "contents": "let scale = (\n    ~x: float,\n    ~y: float,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rotate", "title": "rotate", "contents": "Technically, rotate multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by pushMatrix\nand popMatrix.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rotate", "title": "rotate", "contents": "The coordinates are always rotated around their relative position to the\norigin. Positive numbers rotate objects in a clockwise direction and\nnegative numbers rotate in the couterclockwise direction. Transformations\napply to everything that happens afterward, and subsequent calls to the\nfunction compound the effect. For example, calling\nrotate Constants.pi/2. env once and then calling rotate Constants.pi/2. env\na second time is the same as a single rotate Constants.pi env. All\ntranformations are reset when draw begins again.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rotate", "title": "rotate", "contents": " Rotates the amount specified by the angle parameter. Angles must be\nspecified in radians (values from 0 to two_pi), or they can be converted\nfrom degrees to radians with the radians function.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rotate", "title": "rotate", "contents": "let rotate = (\n    float,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-translate", "title": "translate", "contents": "Transformations are cumulative and apply to everything that happens\nafter and subsequent calls to the function accumulates the effect.\nFor example, calling translate dx::50 dy::0 env and then\ntranslate dx::20 dy::0 env is the same as translate dx::70 dy::0 env.\nIf translate is called within draw, the transformation is reset\nwhen the loop begins again. This function can be further controlled\nby using pushMatrix and popMatrix.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-translate", "title": "translate", "contents": " Specifies an amount to displace objects within the display window.\nThe dx parameter specifies left/right translation, the dy parameter\nspecifies up/down translation.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-translate", "title": "translate", "contents": "let translate = (\n    ~x: float,\n    ~y: float,\n    Reprocessing_Types.Types.glEnvT\n) => unit", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html", "title": "Reprocessing_Draw", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#Reprocessing_Draw", "title": "Reprocessing_Draw", "contents": "", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Constants.html#value-tau", "title": "tau", "contents": " tau is a mathematical constant with the value 6.2831855. It is the circle\nconstant relating the circumference of a circle to its linear dimension, the\nratio of the circumference of a circle to its radius. It has the same value\nas two_pi.", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-tau", "title": "tau", "contents": "let tau = float", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-two_pi", "title": "two_pi", "contents": " two_pi is a mathematical constant with the value 6.2831855. It is twice the\nratio of the circumference of a circle to its diameter.", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-two_pi", "title": "two_pi", "contents": "let two_pi = float", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-quarter_pi", "title": "quarter_pi", "contents": " quarter_pi is a mathematical constant with the value 0.7853982. It is one\nquarter the ratio of the circumference of a circle to its diameter.", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-quarter_pi", "title": "quarter_pi", "contents": "let quarter_pi = float", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-half_pi", "title": "half_pi", "contents": " half_pi is a mathematical constant with the value 1.5707964. It is half\nthe ratio of the circumference of a circle to its diameter", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-half_pi", "title": "half_pi", "contents": "let half_pi = float", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-pi", "title": "pi", "contents": " pi is a mathematical constant with the value 3.1415927. It is the ratio of\nthe circumference of a circle to its diameter. It is useful in combination\nwith the trigonometric functions sin and cos.", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-pi", "title": "pi", "contents": "let pi = float", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-blue", "title": "blue", "contents": " Convenience constant for the color blue ", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-blue", "title": "blue", "contents": "let blue = Reprocessing_Common.colorT", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-green", "title": "green", "contents": " Convenience constant for the color green ", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-green", "title": "green", "contents": "let green = Reprocessing_Common.colorT", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-red", "title": "red", "contents": " Convenience constant for the color red ", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-red", "title": "red", "contents": "let red = Reprocessing_Common.colorT", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-black", "title": "black", "contents": " Convenience constant for the color black ", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-black", "title": "black", "contents": "let black = Reprocessing_Common.colorT", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-white", "title": "white", "contents": " Convenience constant for the color white ", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-white", "title": "white", "contents": "let white = Reprocessing_Common.colorT", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html", "title": "Reprocessing_Constants", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#Reprocessing_Constants", "title": "Reprocessing_Constants", "contents": "", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Common.html#module-Stream", "title": "Stream", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html", "title": "Reprocessing_Common", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#Reprocessing_Common", "title": "Reprocessing_Common", "contents": "", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_ClientWrapper.html", "title": "Reprocessing_ClientWrapper", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing_ClientWrapper"},
{"href": "./api/Reprocessing_ClientWrapper.html#Reprocessing_ClientWrapper", "title": "Reprocessing_ClientWrapper", "contents": "", "breadcrumb": "Reprocessing_ClientWrapper"},
{"href": "./api/Reprocessing.html#value-run", "title": "run", "contents": " Entrypoint to the graphics library. The system\nis designed for you to return a self-defined &#39;state&#39;\nobject from setup, which will then be passed to every\ncallback you choose to implement. Updating the state\nis done by returning a different value from the callback.", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#value-run", "title": "run", "contents": "let run = (\n    ~setup: (glEnvT) => 'a,\n    ~?draw: option(('a, glEnvT) => 'a),\n    ~?mouseMove: option(('a, glEnvT) => 'a),\n    ~?mouseDragged: option(('a, glEnvT) => 'a),\n    ~?mouseDown: option(('a, glEnvT) => 'a),\n    ~?mouseUp: option(('a, glEnvT) => 'a),\n    ~?touchMove: option(('a, glEnvT) => 'a),\n    ~?touchStart: option(('a, glEnvT) => 'a),\n    ~?touchEnd: option(('a, glEnvT) => 'a),\n    ~?keyPressed: option(('a, glEnvT) => 'a),\n    ~?keyReleased: option(('a, glEnvT) => 'a),\n    ~?keyTyped: option(('a, glEnvT) => 'a),\n    ~?backPressed: option(('a, glEnvT) => option('a)),\n    ~?title: option(string),\n    unit\n) => unit", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#module-Constants", "title": "Constants", "contents": " Contains useful constants ", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#module-Utils", "title": "Utils", "contents": " Contains utility functions ", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#module-Events", "title": "Events", "contents": " Contains types for events. ", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#module-Env", "title": "Env", "contents": " Contains functions having to do with the environment:\nie window properties, user input", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#module-Draw", "title": "Draw", "contents": " Contains functions having to do with drawing to the screen ", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html", "title": "Reprocessing", "contents": "This module does not have a toplevel documentation block.", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#Reprocessing", "title": "Reprocessing", "contents": "", "breadcrumb": "Reprocessing"}]